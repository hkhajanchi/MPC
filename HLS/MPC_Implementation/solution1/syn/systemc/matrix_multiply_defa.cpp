// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "matrix_multiply_defa.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic matrix_multiply_defa::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic matrix_multiply_defa::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> matrix_multiply_defa::ap_ST_fsm_state1 = "1";
const sc_lv<3> matrix_multiply_defa::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> matrix_multiply_defa::ap_ST_fsm_state6 = "100";
const bool matrix_multiply_defa::ap_const_boolean_1 = true;
const sc_lv<32> matrix_multiply_defa::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> matrix_multiply_defa::ap_const_lv32_1 = "1";
const bool matrix_multiply_defa::ap_const_boolean_0 = false;
const sc_lv<1> matrix_multiply_defa::ap_const_lv1_0 = "0";
const sc_lv<1> matrix_multiply_defa::ap_const_lv1_1 = "1";
const sc_lv<6> matrix_multiply_defa::ap_const_lv6_0 = "000000";
const sc_lv<5> matrix_multiply_defa::ap_const_lv5_0 = "00000";
const sc_lv<2> matrix_multiply_defa::ap_const_lv2_0 = "00";
const sc_lv<6> matrix_multiply_defa::ap_const_lv6_3C = "111100";
const sc_lv<6> matrix_multiply_defa::ap_const_lv6_1 = "1";
const sc_lv<5> matrix_multiply_defa::ap_const_lv5_1 = "1";
const sc_lv<2> matrix_multiply_defa::ap_const_lv2_2 = "10";
const sc_lv<2> matrix_multiply_defa::ap_const_lv2_1 = "1";
const sc_lv<32> matrix_multiply_defa::ap_const_lv32_8 = "1000";
const sc_lv<32> matrix_multiply_defa::ap_const_lv32_17 = "10111";
const sc_lv<32> matrix_multiply_defa::ap_const_lv32_7 = "111";
const sc_lv<32> matrix_multiply_defa::ap_const_lv32_2 = "10";

matrix_multiply_defa::matrix_multiply_defa(sc_module_name name) : sc_module(name), mVcdFile(0) {
    q_V_U = new matrix_multiply_dbkb("q_V_U");
    q_V_U->clk(ap_clk);
    q_V_U->reset(ap_rst);
    q_V_U->address0(q_V_address0);
    q_V_U->ce0(q_V_ce0);
    q_V_U->q0(q_V_q0);
    PrimalDual_mul_mucud_U1 = new PrimalDual_mul_mucud<1,1,10,16,27>("PrimalDual_mul_mucud_U1");
    PrimalDual_mul_mucud_U1->din0(q_V_load_reg_354);
    PrimalDual_mul_mucud_U1->din1(tmp_8_fu_227_p3);
    PrimalDual_mul_mucud_U1->dout(r_V_fu_293_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_C_0_V_address0);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_mid2_fu_239_p1 );

    SC_METHOD(thread_C_0_V_ce0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_C_0_V_d0);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_3_fu_282_p1 );
    sensitive << ( p_Val2_5_fu_264_p4 );

    SC_METHOD(thread_C_0_V_we0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_s_reg_345_pp0_iter2_reg );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_Col_assign_mid2_fu_159_p3);
    sensitive << ( Col_assign_reg_124 );
    sensitive << ( exitcond4_fu_153_p2 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter3);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( exitcond_flatten_fu_135_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_ap_phi_mux_Row_assign_phi_fu_117_p4);
    sensitive << ( Row_assign_reg_113 );
    sensitive << ( exitcond_flatten_reg_315 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_mid2_v_reg_324 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_exitcond4_fu_153_p2);
    sensitive << ( Col_assign_reg_124 );
    sensitive << ( exitcond_flatten_fu_135_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_exitcond_flatten_fu_135_p2);
    sensitive << ( indvar_flatten_reg_102 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_indvar_flatten_next_fu_141_p2);
    sensitive << ( indvar_flatten_reg_102 );

    SC_METHOD(thread_k_1_fu_218_p2);
    sensitive << ( Col_assign_mid2_fu_159_p3 );

    SC_METHOD(thread_p_Val2_2_fu_243_p1);
    sensitive << ( r_V_reg_359 );

    SC_METHOD(thread_p_Val2_3_fu_246_p2);
    sensitive << ( p_Val2_1_fu_60 );
    sensitive << ( p_Val2_2_fu_243_p1 );

    SC_METHOD(thread_p_Val2_5_fu_264_p4);
    sensitive << ( sum_mult_V_fu_252_p3 );

    SC_METHOD(thread_q_V_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_6_cast_fu_197_p1 );

    SC_METHOD(thread_q_V_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_r_fu_147_p2);
    sensitive << ( ap_phi_mux_Row_assign_phi_fu_117_p4 );

    SC_METHOD(thread_sum_mult_V_fu_252_p3);
    sensitive << ( tmp_5_reg_340_pp0_iter2_reg );
    sensitive << ( p_Val2_2_fu_243_p1 );
    sensitive << ( p_Val2_3_fu_246_p2 );

    SC_METHOD(thread_tmp_3_fu_282_p1);
    sensitive << ( tmp_9_fu_274_p3 );

    SC_METHOD(thread_tmp_4_cast_fu_183_p1);
    sensitive << ( tmp_fu_175_p3 );

    SC_METHOD(thread_tmp_5_fu_206_p2);
    sensitive << ( exitcond_flatten_fu_135_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( Col_assign_mid2_fu_159_p3 );

    SC_METHOD(thread_tmp_6_cast_fu_197_p1);
    sensitive << ( tmp_6_fu_191_p2 );

    SC_METHOD(thread_tmp_6_fu_191_p2);
    sensitive << ( tmp_4_cast_fu_183_p1 );
    sensitive << ( tmp_i_i_cast_fu_187_p1 );

    SC_METHOD(thread_tmp_7_fu_202_p1);
    sensitive << ( Col_assign_mid2_fu_159_p3 );

    SC_METHOD(thread_tmp_8_fu_227_p3);
    sensitive << ( B_0_0_V_read );
    sensitive << ( B_0_1_V_read );
    sensitive << ( tmp_7_reg_335_pp0_iter1_reg );

    SC_METHOD(thread_tmp_9_fu_274_p3);
    sensitive << ( sum_mult_V_fu_252_p3 );

    SC_METHOD(thread_tmp_fu_175_p3);
    sensitive << ( tmp_mid2_v_fu_167_p3 );

    SC_METHOD(thread_tmp_i_i_cast_fu_187_p1);
    sensitive << ( Col_assign_mid2_fu_159_p3 );

    SC_METHOD(thread_tmp_mid2_fu_239_p1);
    sensitive << ( tmp_mid2_v_reg_324_pp0_iter2_reg );

    SC_METHOD(thread_tmp_mid2_v_fu_167_p3);
    sensitive << ( ap_phi_mux_Row_assign_phi_fu_117_p4 );
    sensitive << ( exitcond4_fu_153_p2 );
    sensitive << ( r_fu_147_p2 );

    SC_METHOD(thread_tmp_s_fu_212_p2);
    sensitive << ( exitcond_flatten_fu_135_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( Col_assign_mid2_fu_159_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( exitcond_flatten_fu_135_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "matrix_multiply_defa_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, B_0_0_V_read, "(port)B_0_0_V_read");
    sc_trace(mVcdFile, B_0_1_V_read, "(port)B_0_1_V_read");
    sc_trace(mVcdFile, C_0_V_address0, "(port)C_0_V_address0");
    sc_trace(mVcdFile, C_0_V_ce0, "(port)C_0_V_ce0");
    sc_trace(mVcdFile, C_0_V_we0, "(port)C_0_V_we0");
    sc_trace(mVcdFile, C_0_V_d0, "(port)C_0_V_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, q_V_address0, "q_V_address0");
    sc_trace(mVcdFile, q_V_ce0, "q_V_ce0");
    sc_trace(mVcdFile, q_V_q0, "q_V_q0");
    sc_trace(mVcdFile, indvar_flatten_reg_102, "indvar_flatten_reg_102");
    sc_trace(mVcdFile, Row_assign_reg_113, "Row_assign_reg_113");
    sc_trace(mVcdFile, Col_assign_reg_124, "Col_assign_reg_124");
    sc_trace(mVcdFile, exitcond_flatten_fu_135_p2, "exitcond_flatten_fu_135_p2");
    sc_trace(mVcdFile, exitcond_flatten_reg_315, "exitcond_flatten_reg_315");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter3, "ap_block_state5_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, exitcond_flatten_reg_315_pp0_iter1_reg, "exitcond_flatten_reg_315_pp0_iter1_reg");
    sc_trace(mVcdFile, exitcond_flatten_reg_315_pp0_iter2_reg, "exitcond_flatten_reg_315_pp0_iter2_reg");
    sc_trace(mVcdFile, indvar_flatten_next_fu_141_p2, "indvar_flatten_next_fu_141_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_mid2_v_fu_167_p3, "tmp_mid2_v_fu_167_p3");
    sc_trace(mVcdFile, tmp_mid2_v_reg_324, "tmp_mid2_v_reg_324");
    sc_trace(mVcdFile, tmp_mid2_v_reg_324_pp0_iter1_reg, "tmp_mid2_v_reg_324_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_mid2_v_reg_324_pp0_iter2_reg, "tmp_mid2_v_reg_324_pp0_iter2_reg");
    sc_trace(mVcdFile, tmp_7_fu_202_p1, "tmp_7_fu_202_p1");
    sc_trace(mVcdFile, tmp_7_reg_335, "tmp_7_reg_335");
    sc_trace(mVcdFile, tmp_7_reg_335_pp0_iter1_reg, "tmp_7_reg_335_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_5_fu_206_p2, "tmp_5_fu_206_p2");
    sc_trace(mVcdFile, tmp_5_reg_340, "tmp_5_reg_340");
    sc_trace(mVcdFile, tmp_5_reg_340_pp0_iter1_reg, "tmp_5_reg_340_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_5_reg_340_pp0_iter2_reg, "tmp_5_reg_340_pp0_iter2_reg");
    sc_trace(mVcdFile, tmp_s_fu_212_p2, "tmp_s_fu_212_p2");
    sc_trace(mVcdFile, tmp_s_reg_345, "tmp_s_reg_345");
    sc_trace(mVcdFile, tmp_s_reg_345_pp0_iter1_reg, "tmp_s_reg_345_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_s_reg_345_pp0_iter2_reg, "tmp_s_reg_345_pp0_iter2_reg");
    sc_trace(mVcdFile, k_1_fu_218_p2, "k_1_fu_218_p2");
    sc_trace(mVcdFile, q_V_load_reg_354, "q_V_load_reg_354");
    sc_trace(mVcdFile, r_V_fu_293_p2, "r_V_fu_293_p2");
    sc_trace(mVcdFile, r_V_reg_359, "r_V_reg_359");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_phi_mux_Row_assign_phi_fu_117_p4, "ap_phi_mux_Row_assign_phi_fu_117_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_6_cast_fu_197_p1, "tmp_6_cast_fu_197_p1");
    sc_trace(mVcdFile, tmp_mid2_fu_239_p1, "tmp_mid2_fu_239_p1");
    sc_trace(mVcdFile, p_Val2_1_fu_60, "p_Val2_1_fu_60");
    sc_trace(mVcdFile, sum_mult_V_fu_252_p3, "sum_mult_V_fu_252_p3");
    sc_trace(mVcdFile, exitcond4_fu_153_p2, "exitcond4_fu_153_p2");
    sc_trace(mVcdFile, r_fu_147_p2, "r_fu_147_p2");
    sc_trace(mVcdFile, tmp_fu_175_p3, "tmp_fu_175_p3");
    sc_trace(mVcdFile, Col_assign_mid2_fu_159_p3, "Col_assign_mid2_fu_159_p3");
    sc_trace(mVcdFile, tmp_4_cast_fu_183_p1, "tmp_4_cast_fu_183_p1");
    sc_trace(mVcdFile, tmp_i_i_cast_fu_187_p1, "tmp_i_i_cast_fu_187_p1");
    sc_trace(mVcdFile, tmp_6_fu_191_p2, "tmp_6_fu_191_p2");
    sc_trace(mVcdFile, tmp_8_fu_227_p3, "tmp_8_fu_227_p3");
    sc_trace(mVcdFile, p_Val2_2_fu_243_p1, "p_Val2_2_fu_243_p1");
    sc_trace(mVcdFile, p_Val2_3_fu_246_p2, "p_Val2_3_fu_246_p2");
    sc_trace(mVcdFile, tmp_9_fu_274_p3, "tmp_9_fu_274_p3");
    sc_trace(mVcdFile, tmp_3_fu_282_p1, "tmp_3_fu_282_p1");
    sc_trace(mVcdFile, p_Val2_5_fu_264_p4, "p_Val2_5_fu_264_p4");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

matrix_multiply_defa::~matrix_multiply_defa() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete q_V_U;
    delete PrimalDual_mul_mucud_U1;
}

void matrix_multiply_defa::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(exitcond_flatten_fu_135_p2.read(), ap_const_lv1_0))) {
        Col_assign_reg_124 = k_1_fu_218_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        Col_assign_reg_124 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_315.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        Row_assign_reg_113 = tmp_mid2_v_reg_324.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        Row_assign_reg_113 = ap_const_lv5_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_enable_reg_pp0_iter3 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(exitcond_flatten_fu_135_p2.read(), ap_const_lv1_0))) {
        indvar_flatten_reg_102 = indvar_flatten_next_fu_141_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        indvar_flatten_reg_102 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_flatten_reg_315 = exitcond_flatten_fu_135_p2.read();
        exitcond_flatten_reg_315_pp0_iter1_reg = exitcond_flatten_reg_315.read();
        tmp_5_reg_340_pp0_iter1_reg = tmp_5_reg_340.read();
        tmp_7_reg_335_pp0_iter1_reg = tmp_7_reg_335.read();
        tmp_mid2_v_reg_324_pp0_iter1_reg = tmp_mid2_v_reg_324.read();
        tmp_s_reg_345_pp0_iter1_reg = tmp_s_reg_345.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        exitcond_flatten_reg_315_pp0_iter2_reg = exitcond_flatten_reg_315_pp0_iter1_reg.read();
        tmp_5_reg_340_pp0_iter2_reg = tmp_5_reg_340_pp0_iter1_reg.read();
        tmp_mid2_v_reg_324_pp0_iter2_reg = tmp_mid2_v_reg_324_pp0_iter1_reg.read();
        tmp_s_reg_345_pp0_iter2_reg = tmp_s_reg_345_pp0_iter1_reg.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_1) && esl_seteq<1,1,1>(exitcond_flatten_reg_315_pp0_iter2_reg.read(), ap_const_lv1_0))) {
        p_Val2_1_fu_60 = sum_mult_V_fu_252_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_flatten_reg_315.read(), ap_const_lv1_0))) {
        q_V_load_reg_354 = q_V_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_flatten_reg_315_pp0_iter1_reg.read(), ap_const_lv1_0))) {
        r_V_reg_359 = r_V_fu_293_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_flatten_fu_135_p2.read(), ap_const_lv1_0))) {
        tmp_5_reg_340 = tmp_5_fu_206_p2.read();
        tmp_7_reg_335 = tmp_7_fu_202_p1.read();
        tmp_s_reg_345 = tmp_s_fu_212_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(exitcond_flatten_fu_135_p2.read(), ap_const_lv1_0))) {
        tmp_mid2_v_reg_324 = tmp_mid2_v_fu_167_p3.read();
    }
}

void matrix_multiply_defa::thread_C_0_V_address0() {
    C_0_V_address0 =  (sc_lv<5>) (tmp_mid2_fu_239_p1.read());
}

void matrix_multiply_defa::thread_C_0_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_1))) {
        C_0_V_ce0 = ap_const_logic_1;
    } else {
        C_0_V_ce0 = ap_const_logic_0;
    }
}

void matrix_multiply_defa::thread_C_0_V_d0() {
    C_0_V_d0 = (!tmp_3_fu_282_p1.read().is_01() || !p_Val2_5_fu_264_p4.read().is_01())? sc_lv<16>(): (sc_biguint<16>(tmp_3_fu_282_p1.read()) + sc_biguint<16>(p_Val2_5_fu_264_p4.read()));
}

void matrix_multiply_defa::thread_C_0_V_we0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(tmp_s_reg_345_pp0_iter2_reg.read(), ap_const_lv1_1))) {
        C_0_V_we0 = ap_const_logic_1;
    } else {
        C_0_V_we0 = ap_const_logic_0;
    }
}

void matrix_multiply_defa::thread_Col_assign_mid2_fu_159_p3() {
    Col_assign_mid2_fu_159_p3 = (!exitcond4_fu_153_p2.read()[0].is_01())? sc_lv<2>(): ((exitcond4_fu_153_p2.read()[0].to_bool())? ap_const_lv2_0: Col_assign_reg_124.read());
}

void matrix_multiply_defa::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void matrix_multiply_defa::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void matrix_multiply_defa::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[2];
}

void matrix_multiply_defa::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_multiply_defa::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_multiply_defa::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_multiply_defa::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_multiply_defa::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_multiply_defa::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_multiply_defa::thread_ap_block_state5_pp0_stage0_iter3() {
    ap_block_state5_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_multiply_defa::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(exitcond_flatten_fu_135_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void matrix_multiply_defa::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void matrix_multiply_defa::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void matrix_multiply_defa::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void matrix_multiply_defa::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void matrix_multiply_defa::thread_ap_phi_mux_Row_assign_phi_fu_117_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_315.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_Row_assign_phi_fu_117_p4 = tmp_mid2_v_reg_324.read();
    } else {
        ap_phi_mux_Row_assign_phi_fu_117_p4 = Row_assign_reg_113.read();
    }
}

void matrix_multiply_defa::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void matrix_multiply_defa::thread_exitcond4_fu_153_p2() {
    exitcond4_fu_153_p2 = (!Col_assign_reg_124.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(Col_assign_reg_124.read() == ap_const_lv2_2);
}

void matrix_multiply_defa::thread_exitcond_flatten_fu_135_p2() {
    exitcond_flatten_fu_135_p2 = (!indvar_flatten_reg_102.read().is_01() || !ap_const_lv6_3C.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_102.read() == ap_const_lv6_3C);
}

void matrix_multiply_defa::thread_indvar_flatten_next_fu_141_p2() {
    indvar_flatten_next_fu_141_p2 = (!indvar_flatten_reg_102.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(indvar_flatten_reg_102.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void matrix_multiply_defa::thread_k_1_fu_218_p2() {
    k_1_fu_218_p2 = (!Col_assign_mid2_fu_159_p3.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(Col_assign_mid2_fu_159_p3.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void matrix_multiply_defa::thread_p_Val2_2_fu_243_p1() {
    p_Val2_2_fu_243_p1 = esl_sext<34,27>(r_V_reg_359.read());
}

void matrix_multiply_defa::thread_p_Val2_3_fu_246_p2() {
    p_Val2_3_fu_246_p2 = (!p_Val2_2_fu_243_p1.read().is_01() || !p_Val2_1_fu_60.read().is_01())? sc_lv<34>(): (sc_bigint<34>(p_Val2_2_fu_243_p1.read()) + sc_biguint<34>(p_Val2_1_fu_60.read()));
}

void matrix_multiply_defa::thread_p_Val2_5_fu_264_p4() {
    p_Val2_5_fu_264_p4 = sum_mult_V_fu_252_p3.read().range(23, 8);
}

void matrix_multiply_defa::thread_q_V_address0() {
    q_V_address0 =  (sc_lv<6>) (tmp_6_cast_fu_197_p1.read());
}

void matrix_multiply_defa::thread_q_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1))) {
        q_V_ce0 = ap_const_logic_1;
    } else {
        q_V_ce0 = ap_const_logic_0;
    }
}

void matrix_multiply_defa::thread_r_fu_147_p2() {
    r_fu_147_p2 = (!ap_const_lv5_1.is_01() || !ap_phi_mux_Row_assign_phi_fu_117_p4.read().is_01())? sc_lv<5>(): (sc_biguint<5>(ap_const_lv5_1) + sc_biguint<5>(ap_phi_mux_Row_assign_phi_fu_117_p4.read()));
}

void matrix_multiply_defa::thread_sum_mult_V_fu_252_p3() {
    sum_mult_V_fu_252_p3 = (!tmp_5_reg_340_pp0_iter2_reg.read()[0].is_01())? sc_lv<34>(): ((tmp_5_reg_340_pp0_iter2_reg.read()[0].to_bool())? p_Val2_2_fu_243_p1.read(): p_Val2_3_fu_246_p2.read());
}

void matrix_multiply_defa::thread_tmp_3_fu_282_p1() {
    tmp_3_fu_282_p1 = esl_zext<16,1>(tmp_9_fu_274_p3.read());
}

void matrix_multiply_defa::thread_tmp_4_cast_fu_183_p1() {
    tmp_4_cast_fu_183_p1 = esl_zext<7,6>(tmp_fu_175_p3.read());
}

void matrix_multiply_defa::thread_tmp_5_fu_206_p2() {
    tmp_5_fu_206_p2 = (!Col_assign_mid2_fu_159_p3.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(Col_assign_mid2_fu_159_p3.read() == ap_const_lv2_0);
}

void matrix_multiply_defa::thread_tmp_6_cast_fu_197_p1() {
    tmp_6_cast_fu_197_p1 = esl_zext<64,7>(tmp_6_fu_191_p2.read());
}

void matrix_multiply_defa::thread_tmp_6_fu_191_p2() {
    tmp_6_fu_191_p2 = (!tmp_4_cast_fu_183_p1.read().is_01() || !tmp_i_i_cast_fu_187_p1.read().is_01())? sc_lv<7>(): (sc_biguint<7>(tmp_4_cast_fu_183_p1.read()) + sc_biguint<7>(tmp_i_i_cast_fu_187_p1.read()));
}

void matrix_multiply_defa::thread_tmp_7_fu_202_p1() {
    tmp_7_fu_202_p1 = Col_assign_mid2_fu_159_p3.read().range(1-1, 0);
}

void matrix_multiply_defa::thread_tmp_8_fu_227_p3() {
    tmp_8_fu_227_p3 = (!tmp_7_reg_335_pp0_iter1_reg.read()[0].is_01())? sc_lv<16>(): ((tmp_7_reg_335_pp0_iter1_reg.read()[0].to_bool())? B_0_1_V_read.read(): B_0_0_V_read.read());
}

void matrix_multiply_defa::thread_tmp_9_fu_274_p3() {
    tmp_9_fu_274_p3 = sum_mult_V_fu_252_p3.read().range(7, 7);
}

void matrix_multiply_defa::thread_tmp_fu_175_p3() {
    tmp_fu_175_p3 = esl_concat<5,1>(tmp_mid2_v_fu_167_p3.read(), ap_const_lv1_0);
}

void matrix_multiply_defa::thread_tmp_i_i_cast_fu_187_p1() {
    tmp_i_i_cast_fu_187_p1 = esl_zext<7,2>(Col_assign_mid2_fu_159_p3.read());
}

void matrix_multiply_defa::thread_tmp_mid2_fu_239_p1() {
    tmp_mid2_fu_239_p1 = esl_zext<64,5>(tmp_mid2_v_reg_324_pp0_iter2_reg.read());
}

void matrix_multiply_defa::thread_tmp_mid2_v_fu_167_p3() {
    tmp_mid2_v_fu_167_p3 = (!exitcond4_fu_153_p2.read()[0].is_01())? sc_lv<5>(): ((exitcond4_fu_153_p2.read()[0].to_bool())? r_fu_147_p2.read(): ap_phi_mux_Row_assign_phi_fu_117_p4.read());
}

void matrix_multiply_defa::thread_tmp_s_fu_212_p2() {
    tmp_s_fu_212_p2 = (!Col_assign_mid2_fu_159_p3.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(Col_assign_mid2_fu_159_p3.read() == ap_const_lv2_1);
}

void matrix_multiply_defa::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(exitcond_flatten_fu_135_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) && !(esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) || (esl_seteq<1,1,1>(exitcond_flatten_fu_135_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

