// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#define AP_INT_MAX_W 32678

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "x1_V"
#define AUTOTB_TVIN_x1_V  "../tv/cdatafile/c.state_observer.autotvin_x1_V.dat"
// wrapc file define: "x2_V"
#define AUTOTB_TVIN_x2_V  "../tv/cdatafile/c.state_observer.autotvin_x2_V.dat"
// wrapc file define: "u_1_V"
#define AUTOTB_TVIN_u_1_V  "../tv/cdatafile/c.state_observer.autotvin_u_1_V.dat"
// wrapc file define: "u_2_V"
#define AUTOTB_TVIN_u_2_V  "../tv/cdatafile/c.state_observer.autotvin_u_2_V.dat"
// wrapc file define: "x_obs_old_0_V"
#define AUTOTB_TVIN_x_obs_old_0_V  "../tv/cdatafile/c.state_observer.autotvin_x_obs_old_0_V.dat"
// wrapc file define: "x_obs_old_1_V"
#define AUTOTB_TVIN_x_obs_old_1_V  "../tv/cdatafile/c.state_observer.autotvin_x_obs_old_1_V.dat"
// wrapc file define: "x_obs_old_2_V"
#define AUTOTB_TVIN_x_obs_old_2_V  "../tv/cdatafile/c.state_observer.autotvin_x_obs_old_2_V.dat"
// wrapc file define: "x_obs_old_3_V"
#define AUTOTB_TVIN_x_obs_old_3_V  "../tv/cdatafile/c.state_observer.autotvin_x_obs_old_3_V.dat"
// wrapc file define: "x_obs_old_4_V"
#define AUTOTB_TVIN_x_obs_old_4_V  "../tv/cdatafile/c.state_observer.autotvin_x_obs_old_4_V.dat"
// wrapc file define: "x_obs_old_5_V"
#define AUTOTB_TVIN_x_obs_old_5_V  "../tv/cdatafile/c.state_observer.autotvin_x_obs_old_5_V.dat"
// wrapc file define: "x_obs_0_o_V"
#define AUTOTB_TVOUT_x_obs_0_o_V  "../tv/cdatafile/c.state_observer.autotvout_x_obs_0_o_V.dat"
// wrapc file define: "x_obs_1_o_V"
#define AUTOTB_TVOUT_x_obs_1_o_V  "../tv/cdatafile/c.state_observer.autotvout_x_obs_1_o_V.dat"
// wrapc file define: "x_obs_2_o_V"
#define AUTOTB_TVOUT_x_obs_2_o_V  "../tv/cdatafile/c.state_observer.autotvout_x_obs_2_o_V.dat"
// wrapc file define: "x_obs_3_o_V"
#define AUTOTB_TVOUT_x_obs_3_o_V  "../tv/cdatafile/c.state_observer.autotvout_x_obs_3_o_V.dat"
// wrapc file define: "x_obs_4_o_V"
#define AUTOTB_TVOUT_x_obs_4_o_V  "../tv/cdatafile/c.state_observer.autotvout_x_obs_4_o_V.dat"
// wrapc file define: "x_obs_5_o_V"
#define AUTOTB_TVOUT_x_obs_5_o_V  "../tv/cdatafile/c.state_observer.autotvout_x_obs_5_o_V.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "x_obs_0_o_V"
#define AUTOTB_TVOUT_PC_x_obs_0_o_V  "../tv/rtldatafile/rtl.state_observer.autotvout_x_obs_0_o_V.dat"
// tvout file define: "x_obs_1_o_V"
#define AUTOTB_TVOUT_PC_x_obs_1_o_V  "../tv/rtldatafile/rtl.state_observer.autotvout_x_obs_1_o_V.dat"
// tvout file define: "x_obs_2_o_V"
#define AUTOTB_TVOUT_PC_x_obs_2_o_V  "../tv/rtldatafile/rtl.state_observer.autotvout_x_obs_2_o_V.dat"
// tvout file define: "x_obs_3_o_V"
#define AUTOTB_TVOUT_PC_x_obs_3_o_V  "../tv/rtldatafile/rtl.state_observer.autotvout_x_obs_3_o_V.dat"
// tvout file define: "x_obs_4_o_V"
#define AUTOTB_TVOUT_PC_x_obs_4_o_V  "../tv/rtldatafile/rtl.state_observer.autotvout_x_obs_4_o_V.dat"
// tvout file define: "x_obs_5_o_V"
#define AUTOTB_TVOUT_PC_x_obs_5_o_V  "../tv/rtldatafile/rtl.state_observer.autotvout_x_obs_5_o_V.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			x1_V_depth = 0;
			x2_V_depth = 0;
			u_1_V_depth = 0;
			u_2_V_depth = 0;
			x_obs_old_0_V_depth = 0;
			x_obs_old_1_V_depth = 0;
			x_obs_old_2_V_depth = 0;
			x_obs_old_3_V_depth = 0;
			x_obs_old_4_V_depth = 0;
			x_obs_old_5_V_depth = 0;
			x_obs_0_o_V_depth = 0;
			x_obs_1_o_V_depth = 0;
			x_obs_2_o_V_depth = 0;
			x_obs_3_o_V_depth = 0;
			x_obs_4_o_V_depth = 0;
			x_obs_5_o_V_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{x1_V " << x1_V_depth << "}\n";
			total_list << "{x2_V " << x2_V_depth << "}\n";
			total_list << "{u_1_V " << u_1_V_depth << "}\n";
			total_list << "{u_2_V " << u_2_V_depth << "}\n";
			total_list << "{x_obs_old_0_V " << x_obs_old_0_V_depth << "}\n";
			total_list << "{x_obs_old_1_V " << x_obs_old_1_V_depth << "}\n";
			total_list << "{x_obs_old_2_V " << x_obs_old_2_V_depth << "}\n";
			total_list << "{x_obs_old_3_V " << x_obs_old_3_V_depth << "}\n";
			total_list << "{x_obs_old_4_V " << x_obs_old_4_V_depth << "}\n";
			total_list << "{x_obs_old_5_V " << x_obs_old_5_V_depth << "}\n";
			total_list << "{x_obs_0_o_V " << x_obs_0_o_V_depth << "}\n";
			total_list << "{x_obs_1_o_V " << x_obs_1_o_V_depth << "}\n";
			total_list << "{x_obs_2_o_V " << x_obs_2_o_V_depth << "}\n";
			total_list << "{x_obs_3_o_V " << x_obs_3_o_V_depth << "}\n";
			total_list << "{x_obs_4_o_V " << x_obs_4_o_V_depth << "}\n";
			total_list << "{x_obs_5_o_V " << x_obs_5_o_V_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int x1_V_depth;
		int x2_V_depth;
		int u_1_V_depth;
		int u_2_V_depth;
		int x_obs_old_0_V_depth;
		int x_obs_old_1_V_depth;
		int x_obs_old_2_V_depth;
		int x_obs_old_3_V_depth;
		int x_obs_old_4_V_depth;
		int x_obs_old_5_V_depth;
		int x_obs_0_o_V_depth;
		int x_obs_1_o_V_depth;
		int x_obs_2_o_V_depth;
		int x_obs_3_o_V_depth;
		int x_obs_4_o_V_depth;
		int x_obs_5_o_V_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern void state_observer (
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> x1,
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> x2,
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> u_1,
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> u_2,
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> x_obs_old_0,
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> x_obs_old_1,
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> x_obs_old_2,
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> x_obs_old_3,
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> x_obs_old_4,
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> x_obs_old_5,
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> (&x_obs_0_o),
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> (&x_obs_1_o),
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> (&x_obs_2_o),
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> (&x_obs_3_o),
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> (&x_obs_4_o),
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> (&x_obs_5_o));

void AESL_WRAP_state_observer (
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> x1,
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> x2,
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> u_1,
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> u_2,
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> x_obs_old_0,
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> x_obs_old_1,
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> x_obs_old_2,
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> x_obs_old_3,
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> x_obs_old_4,
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> x_obs_old_5,
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> (&x_obs_0_o),
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> (&x_obs_1_o),
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> (&x_obs_2_o),
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> (&x_obs_3_o),
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> (&x_obs_4_o),
ap_fixed<16, 8, (ap_q_mode) 0, (ap_o_mode)3, 0> (&x_obs_5_o))
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "x_obs_0_o_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_x_obs_0_o_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_x_obs_0_o_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_x_obs_0_o_V, AESL_token); // data

			sc_bv<16> *x_obs_0_o_V_pc_buffer = new sc_bv<16>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'x_obs_0_o_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'x_obs_0_o_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					x_obs_0_o_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_x_obs_0_o_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_x_obs_0_o_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: x_obs_0_o_V
				{
					// bitslice(15, 0)
					// {
						// celement: x_obs_0_o.V(15, 0)
						// {
							sc_lv<16>* x_obs_0_o_V_lv0_0_0_1 = new sc_lv<16>[1];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: x_obs_0_o.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(x_obs_0_o) != NULL) // check the null address if the c port is array or others
								{
									x_obs_0_o_V_lv0_0_0_1[hls_map_index].range(15, 0) = sc_bv<16>(x_obs_0_o_V_pc_buffer[hls_map_index].range(15, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: x_obs_0_o.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : x_obs_0_o
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : x_obs_0_o
								// output_left_conversion : (x_obs_0_o).range()
								// output_type_conversion : (x_obs_0_o_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(x_obs_0_o) != NULL) // check the null address if the c port is array or others
								{
									(x_obs_0_o).range() = (x_obs_0_o_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] x_obs_0_o_V_pc_buffer;
		}

		// output port post check: "x_obs_1_o_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_x_obs_1_o_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_x_obs_1_o_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_x_obs_1_o_V, AESL_token); // data

			sc_bv<16> *x_obs_1_o_V_pc_buffer = new sc_bv<16>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'x_obs_1_o_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'x_obs_1_o_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					x_obs_1_o_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_x_obs_1_o_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_x_obs_1_o_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: x_obs_1_o_V
				{
					// bitslice(15, 0)
					// {
						// celement: x_obs_1_o.V(15, 0)
						// {
							sc_lv<16>* x_obs_1_o_V_lv0_0_0_1 = new sc_lv<16>[1];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: x_obs_1_o.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(x_obs_1_o) != NULL) // check the null address if the c port is array or others
								{
									x_obs_1_o_V_lv0_0_0_1[hls_map_index].range(15, 0) = sc_bv<16>(x_obs_1_o_V_pc_buffer[hls_map_index].range(15, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: x_obs_1_o.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : x_obs_1_o
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : x_obs_1_o
								// output_left_conversion : (x_obs_1_o).range()
								// output_type_conversion : (x_obs_1_o_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(x_obs_1_o) != NULL) // check the null address if the c port is array or others
								{
									(x_obs_1_o).range() = (x_obs_1_o_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] x_obs_1_o_V_pc_buffer;
		}

		// output port post check: "x_obs_2_o_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_x_obs_2_o_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_x_obs_2_o_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_x_obs_2_o_V, AESL_token); // data

			sc_bv<16> *x_obs_2_o_V_pc_buffer = new sc_bv<16>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'x_obs_2_o_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'x_obs_2_o_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					x_obs_2_o_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_x_obs_2_o_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_x_obs_2_o_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: x_obs_2_o_V
				{
					// bitslice(15, 0)
					// {
						// celement: x_obs_2_o.V(15, 0)
						// {
							sc_lv<16>* x_obs_2_o_V_lv0_0_0_1 = new sc_lv<16>[1];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: x_obs_2_o.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(x_obs_2_o) != NULL) // check the null address if the c port is array or others
								{
									x_obs_2_o_V_lv0_0_0_1[hls_map_index].range(15, 0) = sc_bv<16>(x_obs_2_o_V_pc_buffer[hls_map_index].range(15, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: x_obs_2_o.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : x_obs_2_o
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : x_obs_2_o
								// output_left_conversion : (x_obs_2_o).range()
								// output_type_conversion : (x_obs_2_o_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(x_obs_2_o) != NULL) // check the null address if the c port is array or others
								{
									(x_obs_2_o).range() = (x_obs_2_o_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] x_obs_2_o_V_pc_buffer;
		}

		// output port post check: "x_obs_3_o_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_x_obs_3_o_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_x_obs_3_o_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_x_obs_3_o_V, AESL_token); // data

			sc_bv<16> *x_obs_3_o_V_pc_buffer = new sc_bv<16>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'x_obs_3_o_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'x_obs_3_o_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					x_obs_3_o_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_x_obs_3_o_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_x_obs_3_o_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: x_obs_3_o_V
				{
					// bitslice(15, 0)
					// {
						// celement: x_obs_3_o.V(15, 0)
						// {
							sc_lv<16>* x_obs_3_o_V_lv0_0_0_1 = new sc_lv<16>[1];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: x_obs_3_o.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(x_obs_3_o) != NULL) // check the null address if the c port is array or others
								{
									x_obs_3_o_V_lv0_0_0_1[hls_map_index].range(15, 0) = sc_bv<16>(x_obs_3_o_V_pc_buffer[hls_map_index].range(15, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: x_obs_3_o.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : x_obs_3_o
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : x_obs_3_o
								// output_left_conversion : (x_obs_3_o).range()
								// output_type_conversion : (x_obs_3_o_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(x_obs_3_o) != NULL) // check the null address if the c port is array or others
								{
									(x_obs_3_o).range() = (x_obs_3_o_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] x_obs_3_o_V_pc_buffer;
		}

		// output port post check: "x_obs_4_o_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_x_obs_4_o_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_x_obs_4_o_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_x_obs_4_o_V, AESL_token); // data

			sc_bv<16> *x_obs_4_o_V_pc_buffer = new sc_bv<16>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'x_obs_4_o_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'x_obs_4_o_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					x_obs_4_o_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_x_obs_4_o_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_x_obs_4_o_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: x_obs_4_o_V
				{
					// bitslice(15, 0)
					// {
						// celement: x_obs_4_o.V(15, 0)
						// {
							sc_lv<16>* x_obs_4_o_V_lv0_0_0_1 = new sc_lv<16>[1];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: x_obs_4_o.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(x_obs_4_o) != NULL) // check the null address if the c port is array or others
								{
									x_obs_4_o_V_lv0_0_0_1[hls_map_index].range(15, 0) = sc_bv<16>(x_obs_4_o_V_pc_buffer[hls_map_index].range(15, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: x_obs_4_o.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : x_obs_4_o
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : x_obs_4_o
								// output_left_conversion : (x_obs_4_o).range()
								// output_type_conversion : (x_obs_4_o_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(x_obs_4_o) != NULL) // check the null address if the c port is array or others
								{
									(x_obs_4_o).range() = (x_obs_4_o_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] x_obs_4_o_V_pc_buffer;
		}

		// output port post check: "x_obs_5_o_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_x_obs_5_o_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_x_obs_5_o_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_x_obs_5_o_V, AESL_token); // data

			sc_bv<16> *x_obs_5_o_V_pc_buffer = new sc_bv<16>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'x_obs_5_o_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'x_obs_5_o_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					x_obs_5_o_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_x_obs_5_o_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_x_obs_5_o_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: x_obs_5_o_V
				{
					// bitslice(15, 0)
					// {
						// celement: x_obs_5_o.V(15, 0)
						// {
							sc_lv<16>* x_obs_5_o_V_lv0_0_0_1 = new sc_lv<16>[1];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: x_obs_5_o.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(x_obs_5_o) != NULL) // check the null address if the c port is array or others
								{
									x_obs_5_o_V_lv0_0_0_1[hls_map_index].range(15, 0) = sc_bv<16>(x_obs_5_o_V_pc_buffer[hls_map_index].range(15, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: x_obs_5_o.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : x_obs_5_o
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : x_obs_5_o
								// output_left_conversion : (x_obs_5_o).range()
								// output_type_conversion : (x_obs_5_o_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(x_obs_5_o) != NULL) // check the null address if the c port is array or others
								{
									(x_obs_5_o).range() = (x_obs_5_o_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] x_obs_5_o_V_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "x1_V"
		char* tvin_x1_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_x1_V);

		// "x2_V"
		char* tvin_x2_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_x2_V);

		// "u_1_V"
		char* tvin_u_1_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_u_1_V);

		// "u_2_V"
		char* tvin_u_2_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_u_2_V);

		// "x_obs_old_0_V"
		char* tvin_x_obs_old_0_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_x_obs_old_0_V);

		// "x_obs_old_1_V"
		char* tvin_x_obs_old_1_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_x_obs_old_1_V);

		// "x_obs_old_2_V"
		char* tvin_x_obs_old_2_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_x_obs_old_2_V);

		// "x_obs_old_3_V"
		char* tvin_x_obs_old_3_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_x_obs_old_3_V);

		// "x_obs_old_4_V"
		char* tvin_x_obs_old_4_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_x_obs_old_4_V);

		// "x_obs_old_5_V"
		char* tvin_x_obs_old_5_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_x_obs_old_5_V);

		// "x_obs_0_o_V"
		char* tvout_x_obs_0_o_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_x_obs_0_o_V);

		// "x_obs_1_o_V"
		char* tvout_x_obs_1_o_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_x_obs_1_o_V);

		// "x_obs_2_o_V"
		char* tvout_x_obs_2_o_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_x_obs_2_o_V);

		// "x_obs_3_o_V"
		char* tvout_x_obs_3_o_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_x_obs_3_o_V);

		// "x_obs_4_o_V"
		char* tvout_x_obs_4_o_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_x_obs_4_o_V);

		// "x_obs_5_o_V"
		char* tvout_x_obs_5_o_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_x_obs_5_o_V);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_x1_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_x1_V, tvin_x1_V);

		sc_bv<16> x1_V_tvin_wrapc_buffer;

		// RTL Name: x1_V
		{
			// bitslice(15, 0)
			{
				// celement: x1.V(15, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : x1
						// sub_1st_elem          : 
						// ori_name_1st_elem     : x1
						// regulate_c_name       : x1_V
						// input_type_conversion : (x1).range().to_string(SC_BIN).c_str()
						if (&(x1) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> x1_V_tmp_mem;
							x1_V_tmp_mem = (x1).range().to_string(SC_BIN).c_str();
							x1_V_tvin_wrapc_buffer.range(15, 0) = x1_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_x1_V, "%s\n", (x1_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_x1_V, tvin_x1_V);
		}

		tcl_file.set_num(1, &tcl_file.x1_V_depth);
		sprintf(tvin_x1_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_x1_V, tvin_x1_V);

		// [[transaction]]
		sprintf(tvin_x2_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_x2_V, tvin_x2_V);

		sc_bv<16> x2_V_tvin_wrapc_buffer;

		// RTL Name: x2_V
		{
			// bitslice(15, 0)
			{
				// celement: x2.V(15, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : x2
						// sub_1st_elem          : 
						// ori_name_1st_elem     : x2
						// regulate_c_name       : x2_V
						// input_type_conversion : (x2).range().to_string(SC_BIN).c_str()
						if (&(x2) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> x2_V_tmp_mem;
							x2_V_tmp_mem = (x2).range().to_string(SC_BIN).c_str();
							x2_V_tvin_wrapc_buffer.range(15, 0) = x2_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_x2_V, "%s\n", (x2_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_x2_V, tvin_x2_V);
		}

		tcl_file.set_num(1, &tcl_file.x2_V_depth);
		sprintf(tvin_x2_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_x2_V, tvin_x2_V);

		// [[transaction]]
		sprintf(tvin_u_1_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_u_1_V, tvin_u_1_V);

		sc_bv<16> u_1_V_tvin_wrapc_buffer;

		// RTL Name: u_1_V
		{
			// bitslice(15, 0)
			{
				// celement: u_1.V(15, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : u_1
						// sub_1st_elem          : 
						// ori_name_1st_elem     : u_1
						// regulate_c_name       : u_1_V
						// input_type_conversion : (u_1).range().to_string(SC_BIN).c_str()
						if (&(u_1) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> u_1_V_tmp_mem;
							u_1_V_tmp_mem = (u_1).range().to_string(SC_BIN).c_str();
							u_1_V_tvin_wrapc_buffer.range(15, 0) = u_1_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_u_1_V, "%s\n", (u_1_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_u_1_V, tvin_u_1_V);
		}

		tcl_file.set_num(1, &tcl_file.u_1_V_depth);
		sprintf(tvin_u_1_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_u_1_V, tvin_u_1_V);

		// [[transaction]]
		sprintf(tvin_u_2_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_u_2_V, tvin_u_2_V);

		sc_bv<16> u_2_V_tvin_wrapc_buffer;

		// RTL Name: u_2_V
		{
			// bitslice(15, 0)
			{
				// celement: u_2.V(15, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : u_2
						// sub_1st_elem          : 
						// ori_name_1st_elem     : u_2
						// regulate_c_name       : u_2_V
						// input_type_conversion : (u_2).range().to_string(SC_BIN).c_str()
						if (&(u_2) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> u_2_V_tmp_mem;
							u_2_V_tmp_mem = (u_2).range().to_string(SC_BIN).c_str();
							u_2_V_tvin_wrapc_buffer.range(15, 0) = u_2_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_u_2_V, "%s\n", (u_2_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_u_2_V, tvin_u_2_V);
		}

		tcl_file.set_num(1, &tcl_file.u_2_V_depth);
		sprintf(tvin_u_2_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_u_2_V, tvin_u_2_V);

		// [[transaction]]
		sprintf(tvin_x_obs_old_0_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_x_obs_old_0_V, tvin_x_obs_old_0_V);

		sc_bv<16> x_obs_old_0_V_tvin_wrapc_buffer;

		// RTL Name: x_obs_old_0_V
		{
			// bitslice(15, 0)
			{
				// celement: x_obs_old_0.V(15, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : x_obs_old_0
						// sub_1st_elem          : 
						// ori_name_1st_elem     : x_obs_old_0
						// regulate_c_name       : x_obs_old_0_V
						// input_type_conversion : (x_obs_old_0).range().to_string(SC_BIN).c_str()
						if (&(x_obs_old_0) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> x_obs_old_0_V_tmp_mem;
							x_obs_old_0_V_tmp_mem = (x_obs_old_0).range().to_string(SC_BIN).c_str();
							x_obs_old_0_V_tvin_wrapc_buffer.range(15, 0) = x_obs_old_0_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_x_obs_old_0_V, "%s\n", (x_obs_old_0_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_x_obs_old_0_V, tvin_x_obs_old_0_V);
		}

		tcl_file.set_num(1, &tcl_file.x_obs_old_0_V_depth);
		sprintf(tvin_x_obs_old_0_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_x_obs_old_0_V, tvin_x_obs_old_0_V);

		// [[transaction]]
		sprintf(tvin_x_obs_old_1_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_x_obs_old_1_V, tvin_x_obs_old_1_V);

		sc_bv<16> x_obs_old_1_V_tvin_wrapc_buffer;

		// RTL Name: x_obs_old_1_V
		{
			// bitslice(15, 0)
			{
				// celement: x_obs_old_1.V(15, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : x_obs_old_1
						// sub_1st_elem          : 
						// ori_name_1st_elem     : x_obs_old_1
						// regulate_c_name       : x_obs_old_1_V
						// input_type_conversion : (x_obs_old_1).range().to_string(SC_BIN).c_str()
						if (&(x_obs_old_1) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> x_obs_old_1_V_tmp_mem;
							x_obs_old_1_V_tmp_mem = (x_obs_old_1).range().to_string(SC_BIN).c_str();
							x_obs_old_1_V_tvin_wrapc_buffer.range(15, 0) = x_obs_old_1_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_x_obs_old_1_V, "%s\n", (x_obs_old_1_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_x_obs_old_1_V, tvin_x_obs_old_1_V);
		}

		tcl_file.set_num(1, &tcl_file.x_obs_old_1_V_depth);
		sprintf(tvin_x_obs_old_1_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_x_obs_old_1_V, tvin_x_obs_old_1_V);

		// [[transaction]]
		sprintf(tvin_x_obs_old_2_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_x_obs_old_2_V, tvin_x_obs_old_2_V);

		sc_bv<16> x_obs_old_2_V_tvin_wrapc_buffer;

		// RTL Name: x_obs_old_2_V
		{
			// bitslice(15, 0)
			{
				// celement: x_obs_old_2.V(15, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : x_obs_old_2
						// sub_1st_elem          : 
						// ori_name_1st_elem     : x_obs_old_2
						// regulate_c_name       : x_obs_old_2_V
						// input_type_conversion : (x_obs_old_2).range().to_string(SC_BIN).c_str()
						if (&(x_obs_old_2) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> x_obs_old_2_V_tmp_mem;
							x_obs_old_2_V_tmp_mem = (x_obs_old_2).range().to_string(SC_BIN).c_str();
							x_obs_old_2_V_tvin_wrapc_buffer.range(15, 0) = x_obs_old_2_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_x_obs_old_2_V, "%s\n", (x_obs_old_2_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_x_obs_old_2_V, tvin_x_obs_old_2_V);
		}

		tcl_file.set_num(1, &tcl_file.x_obs_old_2_V_depth);
		sprintf(tvin_x_obs_old_2_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_x_obs_old_2_V, tvin_x_obs_old_2_V);

		// [[transaction]]
		sprintf(tvin_x_obs_old_3_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_x_obs_old_3_V, tvin_x_obs_old_3_V);

		sc_bv<16> x_obs_old_3_V_tvin_wrapc_buffer;

		// RTL Name: x_obs_old_3_V
		{
			// bitslice(15, 0)
			{
				// celement: x_obs_old_3.V(15, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : x_obs_old_3
						// sub_1st_elem          : 
						// ori_name_1st_elem     : x_obs_old_3
						// regulate_c_name       : x_obs_old_3_V
						// input_type_conversion : (x_obs_old_3).range().to_string(SC_BIN).c_str()
						if (&(x_obs_old_3) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> x_obs_old_3_V_tmp_mem;
							x_obs_old_3_V_tmp_mem = (x_obs_old_3).range().to_string(SC_BIN).c_str();
							x_obs_old_3_V_tvin_wrapc_buffer.range(15, 0) = x_obs_old_3_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_x_obs_old_3_V, "%s\n", (x_obs_old_3_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_x_obs_old_3_V, tvin_x_obs_old_3_V);
		}

		tcl_file.set_num(1, &tcl_file.x_obs_old_3_V_depth);
		sprintf(tvin_x_obs_old_3_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_x_obs_old_3_V, tvin_x_obs_old_3_V);

		// [[transaction]]
		sprintf(tvin_x_obs_old_4_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_x_obs_old_4_V, tvin_x_obs_old_4_V);

		sc_bv<16> x_obs_old_4_V_tvin_wrapc_buffer;

		// RTL Name: x_obs_old_4_V
		{
			// bitslice(15, 0)
			{
				// celement: x_obs_old_4.V(15, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : x_obs_old_4
						// sub_1st_elem          : 
						// ori_name_1st_elem     : x_obs_old_4
						// regulate_c_name       : x_obs_old_4_V
						// input_type_conversion : (x_obs_old_4).range().to_string(SC_BIN).c_str()
						if (&(x_obs_old_4) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> x_obs_old_4_V_tmp_mem;
							x_obs_old_4_V_tmp_mem = (x_obs_old_4).range().to_string(SC_BIN).c_str();
							x_obs_old_4_V_tvin_wrapc_buffer.range(15, 0) = x_obs_old_4_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_x_obs_old_4_V, "%s\n", (x_obs_old_4_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_x_obs_old_4_V, tvin_x_obs_old_4_V);
		}

		tcl_file.set_num(1, &tcl_file.x_obs_old_4_V_depth);
		sprintf(tvin_x_obs_old_4_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_x_obs_old_4_V, tvin_x_obs_old_4_V);

		// [[transaction]]
		sprintf(tvin_x_obs_old_5_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_x_obs_old_5_V, tvin_x_obs_old_5_V);

		sc_bv<16> x_obs_old_5_V_tvin_wrapc_buffer;

		// RTL Name: x_obs_old_5_V
		{
			// bitslice(15, 0)
			{
				// celement: x_obs_old_5.V(15, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : x_obs_old_5
						// sub_1st_elem          : 
						// ori_name_1st_elem     : x_obs_old_5
						// regulate_c_name       : x_obs_old_5_V
						// input_type_conversion : (x_obs_old_5).range().to_string(SC_BIN).c_str()
						if (&(x_obs_old_5) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> x_obs_old_5_V_tmp_mem;
							x_obs_old_5_V_tmp_mem = (x_obs_old_5).range().to_string(SC_BIN).c_str();
							x_obs_old_5_V_tvin_wrapc_buffer.range(15, 0) = x_obs_old_5_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_x_obs_old_5_V, "%s\n", (x_obs_old_5_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_x_obs_old_5_V, tvin_x_obs_old_5_V);
		}

		tcl_file.set_num(1, &tcl_file.x_obs_old_5_V_depth);
		sprintf(tvin_x_obs_old_5_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_x_obs_old_5_V, tvin_x_obs_old_5_V);

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		state_observer(x1, x2, u_1, u_2, x_obs_old_0, x_obs_old_1, x_obs_old_2, x_obs_old_3, x_obs_old_4, x_obs_old_5, x_obs_0_o, x_obs_1_o, x_obs_2_o, x_obs_3_o, x_obs_4_o, x_obs_5_o);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_x_obs_0_o_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_x_obs_0_o_V, tvout_x_obs_0_o_V);

		sc_bv<16>* x_obs_0_o_V_tvout_wrapc_buffer = new sc_bv<16>[1];

		// RTL Name: x_obs_0_o_V
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: x_obs_0_o.V(15, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : x_obs_0_o
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : x_obs_0_o
						// regulate_c_name       : x_obs_0_o_V
						// input_type_conversion : (x_obs_0_o).range().to_string(SC_BIN).c_str()
						if (&(x_obs_0_o) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> x_obs_0_o_V_tmp_mem;
							x_obs_0_o_V_tmp_mem = (x_obs_0_o).range().to_string(SC_BIN).c_str();
							x_obs_0_o_V_tvout_wrapc_buffer[hls_map_index].range(15, 0) = x_obs_0_o_V_tmp_mem.range(15, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_x_obs_0_o_V, "%s\n", (x_obs_0_o_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_x_obs_0_o_V, tvout_x_obs_0_o_V);
		}

		tcl_file.set_num(1, &tcl_file.x_obs_0_o_V_depth);
		sprintf(tvout_x_obs_0_o_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_x_obs_0_o_V, tvout_x_obs_0_o_V);

		// release memory allocation
		delete [] x_obs_0_o_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_x_obs_1_o_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_x_obs_1_o_V, tvout_x_obs_1_o_V);

		sc_bv<16>* x_obs_1_o_V_tvout_wrapc_buffer = new sc_bv<16>[1];

		// RTL Name: x_obs_1_o_V
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: x_obs_1_o.V(15, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : x_obs_1_o
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : x_obs_1_o
						// regulate_c_name       : x_obs_1_o_V
						// input_type_conversion : (x_obs_1_o).range().to_string(SC_BIN).c_str()
						if (&(x_obs_1_o) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> x_obs_1_o_V_tmp_mem;
							x_obs_1_o_V_tmp_mem = (x_obs_1_o).range().to_string(SC_BIN).c_str();
							x_obs_1_o_V_tvout_wrapc_buffer[hls_map_index].range(15, 0) = x_obs_1_o_V_tmp_mem.range(15, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_x_obs_1_o_V, "%s\n", (x_obs_1_o_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_x_obs_1_o_V, tvout_x_obs_1_o_V);
		}

		tcl_file.set_num(1, &tcl_file.x_obs_1_o_V_depth);
		sprintf(tvout_x_obs_1_o_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_x_obs_1_o_V, tvout_x_obs_1_o_V);

		// release memory allocation
		delete [] x_obs_1_o_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_x_obs_2_o_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_x_obs_2_o_V, tvout_x_obs_2_o_V);

		sc_bv<16>* x_obs_2_o_V_tvout_wrapc_buffer = new sc_bv<16>[1];

		// RTL Name: x_obs_2_o_V
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: x_obs_2_o.V(15, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : x_obs_2_o
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : x_obs_2_o
						// regulate_c_name       : x_obs_2_o_V
						// input_type_conversion : (x_obs_2_o).range().to_string(SC_BIN).c_str()
						if (&(x_obs_2_o) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> x_obs_2_o_V_tmp_mem;
							x_obs_2_o_V_tmp_mem = (x_obs_2_o).range().to_string(SC_BIN).c_str();
							x_obs_2_o_V_tvout_wrapc_buffer[hls_map_index].range(15, 0) = x_obs_2_o_V_tmp_mem.range(15, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_x_obs_2_o_V, "%s\n", (x_obs_2_o_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_x_obs_2_o_V, tvout_x_obs_2_o_V);
		}

		tcl_file.set_num(1, &tcl_file.x_obs_2_o_V_depth);
		sprintf(tvout_x_obs_2_o_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_x_obs_2_o_V, tvout_x_obs_2_o_V);

		// release memory allocation
		delete [] x_obs_2_o_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_x_obs_3_o_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_x_obs_3_o_V, tvout_x_obs_3_o_V);

		sc_bv<16>* x_obs_3_o_V_tvout_wrapc_buffer = new sc_bv<16>[1];

		// RTL Name: x_obs_3_o_V
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: x_obs_3_o.V(15, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : x_obs_3_o
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : x_obs_3_o
						// regulate_c_name       : x_obs_3_o_V
						// input_type_conversion : (x_obs_3_o).range().to_string(SC_BIN).c_str()
						if (&(x_obs_3_o) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> x_obs_3_o_V_tmp_mem;
							x_obs_3_o_V_tmp_mem = (x_obs_3_o).range().to_string(SC_BIN).c_str();
							x_obs_3_o_V_tvout_wrapc_buffer[hls_map_index].range(15, 0) = x_obs_3_o_V_tmp_mem.range(15, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_x_obs_3_o_V, "%s\n", (x_obs_3_o_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_x_obs_3_o_V, tvout_x_obs_3_o_V);
		}

		tcl_file.set_num(1, &tcl_file.x_obs_3_o_V_depth);
		sprintf(tvout_x_obs_3_o_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_x_obs_3_o_V, tvout_x_obs_3_o_V);

		// release memory allocation
		delete [] x_obs_3_o_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_x_obs_4_o_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_x_obs_4_o_V, tvout_x_obs_4_o_V);

		sc_bv<16>* x_obs_4_o_V_tvout_wrapc_buffer = new sc_bv<16>[1];

		// RTL Name: x_obs_4_o_V
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: x_obs_4_o.V(15, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : x_obs_4_o
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : x_obs_4_o
						// regulate_c_name       : x_obs_4_o_V
						// input_type_conversion : (x_obs_4_o).range().to_string(SC_BIN).c_str()
						if (&(x_obs_4_o) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> x_obs_4_o_V_tmp_mem;
							x_obs_4_o_V_tmp_mem = (x_obs_4_o).range().to_string(SC_BIN).c_str();
							x_obs_4_o_V_tvout_wrapc_buffer[hls_map_index].range(15, 0) = x_obs_4_o_V_tmp_mem.range(15, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_x_obs_4_o_V, "%s\n", (x_obs_4_o_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_x_obs_4_o_V, tvout_x_obs_4_o_V);
		}

		tcl_file.set_num(1, &tcl_file.x_obs_4_o_V_depth);
		sprintf(tvout_x_obs_4_o_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_x_obs_4_o_V, tvout_x_obs_4_o_V);

		// release memory allocation
		delete [] x_obs_4_o_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_x_obs_5_o_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_x_obs_5_o_V, tvout_x_obs_5_o_V);

		sc_bv<16>* x_obs_5_o_V_tvout_wrapc_buffer = new sc_bv<16>[1];

		// RTL Name: x_obs_5_o_V
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: x_obs_5_o.V(15, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : x_obs_5_o
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : x_obs_5_o
						// regulate_c_name       : x_obs_5_o_V
						// input_type_conversion : (x_obs_5_o).range().to_string(SC_BIN).c_str()
						if (&(x_obs_5_o) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> x_obs_5_o_V_tmp_mem;
							x_obs_5_o_V_tmp_mem = (x_obs_5_o).range().to_string(SC_BIN).c_str();
							x_obs_5_o_V_tvout_wrapc_buffer[hls_map_index].range(15, 0) = x_obs_5_o_V_tmp_mem.range(15, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_x_obs_5_o_V, "%s\n", (x_obs_5_o_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_x_obs_5_o_V, tvout_x_obs_5_o_V);
		}

		tcl_file.set_num(1, &tcl_file.x_obs_5_o_V_depth);
		sprintf(tvout_x_obs_5_o_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_x_obs_5_o_V, tvout_x_obs_5_o_V);

		// release memory allocation
		delete [] x_obs_5_o_V_tvout_wrapc_buffer;

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "x1_V"
		delete [] tvin_x1_V;
		// release memory allocation: "x2_V"
		delete [] tvin_x2_V;
		// release memory allocation: "u_1_V"
		delete [] tvin_u_1_V;
		// release memory allocation: "u_2_V"
		delete [] tvin_u_2_V;
		// release memory allocation: "x_obs_old_0_V"
		delete [] tvin_x_obs_old_0_V;
		// release memory allocation: "x_obs_old_1_V"
		delete [] tvin_x_obs_old_1_V;
		// release memory allocation: "x_obs_old_2_V"
		delete [] tvin_x_obs_old_2_V;
		// release memory allocation: "x_obs_old_3_V"
		delete [] tvin_x_obs_old_3_V;
		// release memory allocation: "x_obs_old_4_V"
		delete [] tvin_x_obs_old_4_V;
		// release memory allocation: "x_obs_old_5_V"
		delete [] tvin_x_obs_old_5_V;
		// release memory allocation: "x_obs_0_o_V"
		delete [] tvout_x_obs_0_o_V;
		// release memory allocation: "x_obs_1_o_V"
		delete [] tvout_x_obs_1_o_V;
		// release memory allocation: "x_obs_2_o_V"
		delete [] tvout_x_obs_2_o_V;
		// release memory allocation: "x_obs_3_o_V"
		delete [] tvout_x_obs_3_o_V;
		// release memory allocation: "x_obs_4_o_V"
		delete [] tvout_x_obs_4_o_V;
		// release memory allocation: "x_obs_5_o_V"
		delete [] tvout_x_obs_5_o_V;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

