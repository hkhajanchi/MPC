// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="PI,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.148625,HLS_SYN_LAT=10,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=770,HLS_SYN_LUT=928,HLS_VERSION=2018_2}" *)

module PI (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        setpoint_V,
        plant_in_V,
        error_V,
        error_V_ap_vld,
        pi_out_V,
        pi_out_V_ap_vld,
        acc_out_V_i,
        acc_out_V_o,
        acc_out_V_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] setpoint_V;
input  [15:0] plant_in_V;
output  [15:0] error_V;
output   error_V_ap_vld;
output  [15:0] pi_out_V;
output   pi_out_V_ap_vld;
input  [15:0] acc_out_V_i;
output  [15:0] acc_out_V_o;
output   acc_out_V_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg error_V_ap_vld;
reg pi_out_V_ap_vld;
reg acc_out_V_o_ap_vld;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [15:0] p_Val2_1_fu_125_p2;
reg  signed [15:0] p_Val2_1_reg_402;
reg   [8:0] tmp_reg_408;
reg   [0:0] tmp_10_reg_414;
reg   [15:0] p_Val2_3_reg_419;
wire    ap_CS_fsm_state2;
reg   [0:0] tmp_6_reg_424;
reg   [14:0] tmp_8_reg_429;
wire  signed [15:0] p_Val2_s_24_fu_274_p2;
reg  signed [15:0] p_Val2_s_24_reg_434;
wire    ap_CS_fsm_state3;
wire   [14:0] p_Val2_cast_fu_280_p2;
reg   [14:0] p_Val2_cast_reg_441;
wire    ap_CS_fsm_state4;
wire   [63:0] res_V_1_fu_290_p1;
reg   [63:0] res_V_1_reg_451;
wire    ap_CS_fsm_state9;
wire   [10:0] exp_V_2_fu_304_p2;
reg   [10:0] exp_V_2_reg_456;
wire   [51:0] tmp_15_fu_310_p1;
reg   [51:0] tmp_15_reg_462;
wire   [0:0] sel_tmp1_fu_356_p2;
reg   [0:0] sel_tmp1_reg_467;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire   [63:0] tmp_12_fu_117_p0;
wire  signed [31:0] grp_fu_122_p0;
wire   [14:0] tmp_2_fu_131_p1;
wire   [14:0] tmp_3_fu_135_p1;
wire   [15:0] internal_acc_V_fu_139_p2;
wire   [0:0] tmp_s_fu_151_p2;
wire   [0:0] tmp_4_fu_157_p3;
wire   [0:0] tmp_7_fu_173_p2;
wire   [14:0] p_Val2_5_fu_165_p3;
wire   [14:0] internal_acc_V_cast_fu_145_p2;
wire   [14:0] p_087_1_fu_179_p3;
wire  signed [25:0] p_Val2_2_fu_393_p2;
wire   [15:0] p_Val2_4_fu_241_p1;
wire   [1:0] tmp_8_cast_fu_238_p1;
wire   [1:0] tmp_2_cast_fu_244_p1;
wire   [1:0] tmp4_fu_255_p2;
wire   [14:0] tmp_9_fu_247_p1;
wire   [15:0] tmp4_cast_fu_261_p1;
wire   [15:0] tmp3_fu_250_p2;
wire   [14:0] tmp_1_fu_265_p2;
wire   [14:0] tmp_5_fu_270_p1;
wire   [63:0] grp_fu_122_p1;
wire   [10:0] exp_V_fu_294_p4;
wire   [63:0] p_Result_s_fu_314_p5;
wire   [0:0] notrhs_fu_334_p2;
wire   [0:0] notlhs_fu_329_p2;
wire   [0:0] tmp_11_fu_339_p2;
wire   [0:0] tmp_12_fu_117_p2;
wire   [0:0] sel_tmp_fu_351_p2;
wire   [0:0] tmp_13_fu_345_p2;
wire   [0:0] tmp_16_fu_362_p3;
wire   [0:0] tmp_14_fu_376_p2;
wire   [14:0] p_Val2_cast_25_fu_369_p3;
wire   [14:0] pi_out_V_new_1_fu_381_p3;
wire   [9:0] p_Val2_2_fu_393_p0;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

PI_dcmp_64ns_64nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
PI_dcmp_64ns_64nsbkb_U1(
    .din0(tmp_12_fu_117_p0),
    .din1(64'd4614613358185178726),
    .opcode(5'd2),
    .dout(tmp_12_fu_117_p2)
);

PI_sitodp_32s_64_cud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
PI_sitodp_32s_64_cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_122_p0),
    .ce(1'b1),
    .dout(grp_fu_122_p1)
);

PI_mul_mul_10ns_1dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 26 ))
PI_mul_mul_10ns_1dEe_U3(
    .din0(p_Val2_2_fu_393_p0),
    .din1(p_Val2_1_reg_402),
    .dout(p_Val2_2_fu_393_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        exp_V_2_reg_456 <= exp_V_2_fu_304_p2;
        res_V_1_reg_451 <= res_V_1_fu_290_p1;
        tmp_15_reg_462 <= tmp_15_fu_310_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_Val2_1_reg_402 <= p_Val2_1_fu_125_p2;
        tmp_10_reg_414 <= p_087_1_fu_179_p3[32'd5];
        tmp_reg_408 <= {{p_087_1_fu_179_p3[14:6]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_Val2_3_reg_419 <= {{p_Val2_2_fu_393_p2[23:8]}};
        tmp_6_reg_424 <= p_Val2_2_fu_393_p2[32'd7];
        tmp_8_reg_429 <= {{p_Val2_2_fu_393_p2[22:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_Val2_cast_reg_441 <= p_Val2_cast_fu_280_p2;
        p_Val2_s_24_reg_434 <= p_Val2_s_24_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sel_tmp1_reg_467 <= sel_tmp1_fu_356_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        acc_out_V_o_ap_vld = 1'b1;
    end else begin
        acc_out_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        error_V_ap_vld = 1'b1;
    end else begin
        error_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        pi_out_V_ap_vld = 1'b1;
    end else begin
        pi_out_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_out_V_o = p_087_1_fu_179_p3;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign error_V = p_Val2_1_reg_402;

assign exp_V_2_fu_304_p2 = ($signed(11'd2040) + $signed(exp_V_fu_294_p4));

assign exp_V_fu_294_p4 = {{res_V_1_fu_290_p1[62:52]}};

assign grp_fu_122_p0 = p_Val2_s_24_reg_434;

assign internal_acc_V_cast_fu_145_p2 = (tmp_2_fu_131_p1 + tmp_3_fu_135_p1);

assign internal_acc_V_fu_139_p2 = ($signed(acc_out_V_i) + $signed(p_Val2_1_fu_125_p2));

assign notlhs_fu_329_p2 = ((exp_V_2_reg_456 != 11'd2047) ? 1'b1 : 1'b0);

assign notrhs_fu_334_p2 = ((tmp_15_reg_462 == 52'd0) ? 1'b1 : 1'b0);

assign p_087_1_fu_179_p3 = ((tmp_7_fu_173_p2[0:0] === 1'b1) ? p_Val2_5_fu_165_p3 : internal_acc_V_cast_fu_145_p2);

assign p_Result_s_fu_314_p5 = {{res_V_1_reg_451[63:63]}, {exp_V_2_reg_456}, {res_V_1_reg_451[51:0]}};

assign p_Val2_1_fu_125_p2 = (setpoint_V - plant_in_V);

assign p_Val2_2_fu_393_p0 = 26'd330;

assign p_Val2_4_fu_241_p1 = tmp_reg_408;

assign p_Val2_5_fu_165_p3 = ((tmp_s_fu_151_p2[0:0] === 1'b1) ? 15'd16384 : 15'd0);

assign p_Val2_cast_25_fu_369_p3 = ((sel_tmp1_reg_467[0:0] === 1'b1) ? 15'd845 : 15'd0);

assign p_Val2_cast_fu_280_p2 = (tmp_1_fu_265_p2 + tmp_5_fu_270_p1);

assign p_Val2_s_24_fu_274_p2 = (tmp4_cast_fu_261_p1 + tmp3_fu_250_p2);

assign pi_out_V = pi_out_V_new_1_fu_381_p3;

assign pi_out_V_new_1_fu_381_p3 = ((tmp_14_fu_376_p2[0:0] === 1'b1) ? p_Val2_cast_25_fu_369_p3 : p_Val2_cast_reg_441);

assign res_V_1_fu_290_p1 = grp_fu_122_p1;

assign sel_tmp1_fu_356_p2 = (tmp_13_fu_345_p2 & sel_tmp_fu_351_p2);

assign sel_tmp_fu_351_p2 = ((p_Val2_s_24_reg_434 != 16'd0) ? 1'b1 : 1'b0);

assign tmp3_fu_250_p2 = (p_Val2_3_reg_419 + p_Val2_4_fu_241_p1);

assign tmp4_cast_fu_261_p1 = tmp4_fu_255_p2;

assign tmp4_fu_255_p2 = (tmp_8_cast_fu_238_p1 + tmp_2_cast_fu_244_p1);

assign tmp_11_fu_339_p2 = (notrhs_fu_334_p2 | notlhs_fu_329_p2);

assign tmp_12_fu_117_p0 = p_Result_s_fu_314_p5;

assign tmp_13_fu_345_p2 = (tmp_12_fu_117_p2 & tmp_11_fu_339_p2);

assign tmp_14_fu_376_p2 = (tmp_16_fu_362_p3 | sel_tmp1_reg_467);

assign tmp_15_fu_310_p1 = res_V_1_fu_290_p1[51:0];

assign tmp_16_fu_362_p3 = p_Val2_s_24_reg_434[32'd15];

assign tmp_1_fu_265_p2 = (tmp_9_fu_247_p1 + tmp_8_reg_429);

assign tmp_2_cast_fu_244_p1 = tmp_10_reg_414;

assign tmp_2_fu_131_p1 = p_Val2_1_fu_125_p2[14:0];

assign tmp_3_fu_135_p1 = acc_out_V_i[14:0];

assign tmp_4_fu_157_p3 = internal_acc_V_fu_139_p2[32'd15];

assign tmp_5_fu_270_p1 = tmp4_fu_255_p2;

assign tmp_7_fu_173_p2 = (tmp_s_fu_151_p2 | tmp_4_fu_157_p3);

assign tmp_8_cast_fu_238_p1 = tmp_6_reg_424;

assign tmp_9_fu_247_p1 = tmp_reg_408;

assign tmp_s_fu_151_p2 = (($signed(internal_acc_V_fu_139_p2) > $signed(16'd16384)) ? 1'b1 : 1'b0);

endmodule //PI
