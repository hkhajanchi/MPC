// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fp_test.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fp_test::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fp_test::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> fp_test::ap_ST_fsm_state1 = "1";
const sc_lv<2> fp_test::ap_ST_fsm_state2 = "10";
const sc_lv<32> fp_test::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> fp_test::ap_const_lv32_1 = "1";
const sc_lv<32> fp_test::ap_const_lv32_8 = "1000";
const sc_lv<32> fp_test::ap_const_lv32_16 = "10110";
const sc_lv<32> fp_test::ap_const_lv32_7 = "111";
const sc_lv<23> fp_test::ap_const_lv23_35 = "110101";
const bool fp_test::ap_const_boolean_1 = true;

fp_test::fp_test(sc_module_name name) : sc_module(name), mVcdFile(0) {
    fp_test_mul_mul_1bkb_U1 = new fp_test_mul_mul_1bkb<1,1,16,7,23>("fp_test_mul_mul_1bkb_U1");
    fp_test_mul_mul_1bkb_U1->din0(adc_in_V);
    fp_test_mul_mul_1bkb_U1->din1(p_Val2_s_fu_80_p1);
    fp_test_mul_mul_1bkb_U1->dout(p_Val2_s_fu_80_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_adc_fp_out_V);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( p_Val2_1_fu_67_p1 );
    sensitive << ( tmp_4_fu_70_p1 );

    SC_METHOD(thread_adc_fp_out_V_ap_vld);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_p_Val2_1_fu_67_p1);
    sensitive << ( tmp_1_reg_88 );

    SC_METHOD(thread_p_Val2_s_fu_80_p1);
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_tmp_4_fu_70_p1);
    sensitive << ( tmp_reg_93 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fp_test_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, adc_in_V, "(port)adc_in_V");
    sc_trace(mVcdFile, adc_fp_out_V, "(port)adc_fp_out_V");
    sc_trace(mVcdFile, adc_fp_out_V_ap_vld, "(port)adc_fp_out_V_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_1_reg_88, "tmp_1_reg_88");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_reg_93, "tmp_reg_93");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, p_Val2_s_fu_80_p2, "p_Val2_s_fu_80_p2");
    sc_trace(mVcdFile, p_Val2_1_fu_67_p1, "p_Val2_1_fu_67_p1");
    sc_trace(mVcdFile, tmp_4_fu_70_p1, "tmp_4_fu_70_p1");
    sc_trace(mVcdFile, p_Val2_s_fu_80_p1, "p_Val2_s_fu_80_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("fp_test.hdltvin.dat");
    mHdltvoutHandle.open("fp_test.hdltvout.dat");
}

fp_test::~fp_test() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete fp_test_mul_mul_1bkb_U1;
}

void fp_test::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        tmp_1_reg_88 = p_Val2_s_fu_80_p2.read().range(22, 8);
        tmp_reg_93 = p_Val2_s_fu_80_p2.read().range(7, 7);
    }
}

void fp_test::thread_adc_fp_out_V() {
    adc_fp_out_V = (!p_Val2_1_fu_67_p1.read().is_01() || !tmp_4_fu_70_p1.read().is_01())? sc_lv<16>(): (sc_bigint<16>(p_Val2_1_fu_67_p1.read()) + sc_biguint<16>(tmp_4_fu_70_p1.read()));
}

void fp_test::thread_adc_fp_out_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        adc_fp_out_V_ap_vld = ap_const_logic_1;
    } else {
        adc_fp_out_V_ap_vld = ap_const_logic_0;
    }
}

void fp_test::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fp_test::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void fp_test::thread_p_Val2_1_fu_67_p1() {
    p_Val2_1_fu_67_p1 = esl_sext<16,15>(tmp_1_reg_88.read());
}

void fp_test::thread_p_Val2_s_fu_80_p1() {
    p_Val2_s_fu_80_p1 =  (sc_lv<7>) (ap_const_lv23_35);
}

void fp_test::thread_tmp_4_fu_70_p1() {
    tmp_4_fu_70_p1 = esl_zext<16,1>(tmp_reg_93.read());
}

void fp_test::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void fp_test::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"adc_in_V\" :  \"" << adc_in_V.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"adc_fp_out_V\" :  \"" << adc_fp_out_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"adc_fp_out_V_ap_vld\" :  \"" << adc_fp_out_V_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

