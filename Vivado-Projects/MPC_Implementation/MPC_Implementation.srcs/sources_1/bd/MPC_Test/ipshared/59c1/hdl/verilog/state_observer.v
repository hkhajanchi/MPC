// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="state_observer,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.452250,HLS_SYN_LAT=148,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=14,HLS_SYN_FF=1117,HLS_SYN_LUT=1698,HLS_VERSION=2018_2}" *)

module state_observer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x1_V,
        x2_V,
        u_1_V,
        u_2_V,
        x_obs_old_0_V,
        x_obs_old_1_V,
        x_obs_old_2_V,
        x_obs_old_3_V,
        x_obs_old_4_V,
        x_obs_old_5_V,
        x_obs_0_o_V,
        x_obs_0_o_V_ap_vld,
        x_obs_1_o_V,
        x_obs_1_o_V_ap_vld,
        x_obs_2_o_V,
        x_obs_2_o_V_ap_vld,
        x_obs_3_o_V,
        x_obs_3_o_V_ap_vld,
        x_obs_4_o_V,
        x_obs_4_o_V_ap_vld,
        x_obs_5_o_V,
        x_obs_5_o_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 36'd1;
parameter    ap_ST_fsm_state2 = 36'd2;
parameter    ap_ST_fsm_state3 = 36'd4;
parameter    ap_ST_fsm_state4 = 36'd8;
parameter    ap_ST_fsm_state5 = 36'd16;
parameter    ap_ST_fsm_state6 = 36'd32;
parameter    ap_ST_fsm_state7 = 36'd64;
parameter    ap_ST_fsm_state8 = 36'd128;
parameter    ap_ST_fsm_state9 = 36'd256;
parameter    ap_ST_fsm_state10 = 36'd512;
parameter    ap_ST_fsm_state11 = 36'd1024;
parameter    ap_ST_fsm_state12 = 36'd2048;
parameter    ap_ST_fsm_state13 = 36'd4096;
parameter    ap_ST_fsm_state14 = 36'd8192;
parameter    ap_ST_fsm_state15 = 36'd16384;
parameter    ap_ST_fsm_state16 = 36'd32768;
parameter    ap_ST_fsm_state17 = 36'd65536;
parameter    ap_ST_fsm_state18 = 36'd131072;
parameter    ap_ST_fsm_state19 = 36'd262144;
parameter    ap_ST_fsm_state20 = 36'd524288;
parameter    ap_ST_fsm_state21 = 36'd1048576;
parameter    ap_ST_fsm_state22 = 36'd2097152;
parameter    ap_ST_fsm_state23 = 36'd4194304;
parameter    ap_ST_fsm_state24 = 36'd8388608;
parameter    ap_ST_fsm_state25 = 36'd16777216;
parameter    ap_ST_fsm_state26 = 36'd33554432;
parameter    ap_ST_fsm_state27 = 36'd67108864;
parameter    ap_ST_fsm_state28 = 36'd134217728;
parameter    ap_ST_fsm_state29 = 36'd268435456;
parameter    ap_ST_fsm_state30 = 36'd536870912;
parameter    ap_ST_fsm_state31 = 36'd1073741824;
parameter    ap_ST_fsm_state32 = 36'd2147483648;
parameter    ap_ST_fsm_state33 = 36'd4294967296;
parameter    ap_ST_fsm_state34 = 36'd8589934592;
parameter    ap_ST_fsm_state35 = 36'd17179869184;
parameter    ap_ST_fsm_state36 = 36'd34359738368;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] x1_V;
input  [15:0] x2_V;
input  [15:0] u_1_V;
input  [15:0] u_2_V;
input  [15:0] x_obs_old_0_V;
input  [15:0] x_obs_old_1_V;
input  [15:0] x_obs_old_2_V;
input  [15:0] x_obs_old_3_V;
input  [15:0] x_obs_old_4_V;
input  [15:0] x_obs_old_5_V;
output  [15:0] x_obs_0_o_V;
output   x_obs_0_o_V_ap_vld;
output  [15:0] x_obs_1_o_V;
output   x_obs_1_o_V_ap_vld;
output  [15:0] x_obs_2_o_V;
output   x_obs_2_o_V_ap_vld;
output  [15:0] x_obs_3_o_V;
output   x_obs_3_o_V_ap_vld;
output  [15:0] x_obs_4_o_V;
output   x_obs_4_o_V_ap_vld;
output  [15:0] x_obs_5_o_V;
output   x_obs_5_o_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg x_obs_0_o_V_ap_vld;
reg x_obs_1_o_V_ap_vld;
reg x_obs_2_o_V_ap_vld;
reg x_obs_3_o_V_ap_vld;
reg x_obs_4_o_V_ap_vld;
reg x_obs_5_o_V_ap_vld;

(* fsm_encoding = "none" *) reg   [35:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] Aob_V_0_address0;
reg    Aob_V_0_ce0;
wire   [7:0] Aob_V_0_q0;
wire   [2:0] Aob_V_1_address0;
reg    Aob_V_1_ce0;
wire   [7:0] Aob_V_1_q0;
wire   [2:0] Aob_V_2_address0;
reg    Aob_V_2_ce0;
wire   [4:0] Aob_V_2_q0;
wire   [2:0] Aob_V_3_address0;
reg    Aob_V_3_ce0;
wire   [7:0] Aob_V_3_q0;
wire   [2:0] Aob_V_4_address0;
reg    Aob_V_4_ce0;
wire   [8:0] Aob_V_4_q0;
wire   [2:0] Aob_V_5_address0;
reg    Aob_V_5_ce0;
wire   [8:0] Aob_V_5_q0;
wire   [2:0] Bob_V_0_address0;
reg    Bob_V_0_ce0;
wire   [7:0] Bob_V_0_q0;
wire   [2:0] Bob_V_1_address0;
reg    Bob_V_1_ce0;
wire   [7:0] Bob_V_1_q0;
wire   [2:0] Ld_V_0_address0;
reg    Ld_V_0_ce0;
wire   [8:0] Ld_V_0_q0;
wire   [2:0] Ld_V_1_address0;
reg    Ld_V_1_ce0;
wire   [9:0] Ld_V_1_q0;
reg   [15:0] p_Val2_1_reg_1759;
wire    ap_CS_fsm_state2;
reg   [0:0] tmp_20_reg_1764;
reg   [15:0] p_Val2_4_reg_1769;
reg   [0:0] tmp_21_reg_1774;
wire    ap_CS_fsm_state3;
wire   [15:0] p_Val2_2_fu_812_p2;
reg   [15:0] p_Val2_2_reg_1799;
wire   [15:0] p_Val2_5_fu_820_p2;
reg   [15:0] p_Val2_5_reg_1804;
wire  signed [23:0] OP2_V_cast1_fu_825_p1;
reg  signed [23:0] OP2_V_cast1_reg_1809;
wire  signed [26:0] OP2_V_cast_fu_829_p1;
reg  signed [26:0] OP2_V_cast_reg_1814;
wire  signed [23:0] OP2_V_0_1_cast1_fu_833_p1;
reg  signed [23:0] OP2_V_0_1_cast1_reg_1819;
wire  signed [26:0] OP2_V_0_1_cast_fu_837_p1;
reg  signed [26:0] OP2_V_0_1_cast_reg_1824;
wire  signed [22:0] OP2_V_0_2_cast_fu_841_p1;
reg  signed [22:0] OP2_V_0_2_cast_reg_1829;
wire  signed [23:0] OP2_V_0_3_cast_fu_845_p1;
reg  signed [23:0] OP2_V_0_3_cast_reg_1834;
wire  signed [24:0] OP2_V_0_4_cast_fu_849_p1;
reg  signed [24:0] OP2_V_0_4_cast_reg_1839;
wire  signed [24:0] OP2_V_0_5_cast9_fu_853_p1;
reg  signed [24:0] OP2_V_0_5_cast9_reg_1844;
wire   [2:0] i_1_fu_863_p2;
reg   [2:0] i_1_reg_1852;
wire    ap_CS_fsm_state4;
reg   [2:0] a1_0_V_addr_6_reg_1857;
wire   [0:0] exitcond_fu_857_p2;
reg   [7:0] Aob_V_0_load_reg_1893;
wire    ap_CS_fsm_state5;
reg   [7:0] Aob_V_1_load_reg_1898;
reg   [4:0] Aob_V_2_load_reg_1903;
reg   [7:0] Aob_V_3_load_reg_1908;
reg   [8:0] Aob_V_4_load_reg_1913;
reg   [8:0] Aob_V_5_load_reg_1918;
wire  signed [23:0] p_Val2_15_fu_1685_p2;
reg  signed [23:0] p_Val2_15_reg_1923;
wire    ap_CS_fsm_state6;
reg   [0:0] tmp_22_reg_1928;
wire   [15:0] p_Val2_14_fu_916_p2;
reg   [15:0] p_Val2_14_reg_1933;
wire    ap_CS_fsm_state7;
wire  signed [23:0] p_Val2_11_0_1_fu_1691_p2;
reg  signed [23:0] p_Val2_11_0_1_reg_1938;
reg   [0:0] tmp_23_reg_1943;
wire   [15:0] p_Val2_14_0_1_fu_957_p2;
reg   [15:0] p_Val2_14_0_1_reg_1948;
wire    ap_CS_fsm_state8;
wire  signed [22:0] p_Val2_11_0_2_fu_1697_p2;
reg  signed [22:0] p_Val2_11_0_2_reg_1953;
reg   [0:0] tmp_24_reg_1958;
wire   [15:0] p_Val2_14_0_2_fu_1006_p2;
reg   [15:0] p_Val2_14_0_2_reg_1963;
wire    ap_CS_fsm_state9;
wire  signed [23:0] p_Val2_11_0_3_fu_1703_p2;
reg  signed [23:0] p_Val2_11_0_3_reg_1968;
reg   [0:0] tmp_25_reg_1973;
wire   [15:0] p_Val2_14_0_3_fu_1047_p2;
reg   [15:0] p_Val2_14_0_3_reg_1978;
wire    ap_CS_fsm_state10;
wire   [23:0] tmp_26_fu_1056_p1;
reg   [23:0] tmp_26_reg_1983;
reg   [0:0] tmp_27_reg_1988;
wire   [15:0] p_Val2_14_0_4_fu_1091_p2;
reg   [15:0] p_Val2_14_0_4_reg_1993;
wire    ap_CS_fsm_state11;
wire   [23:0] tmp_28_fu_1100_p1;
reg   [23:0] tmp_28_reg_1998;
reg   [0:0] tmp_29_reg_2003;
wire  signed [23:0] OP2_V_1_cast_fu_1142_p1;
reg  signed [23:0] OP2_V_1_cast_reg_2008;
wire    ap_CS_fsm_state13;
wire  signed [23:0] OP2_V_1_0_1_cast_fu_1145_p1;
reg  signed [23:0] OP2_V_1_0_1_cast_reg_2013;
wire   [2:0] i_2_fu_1154_p2;
reg   [2:0] i_2_reg_2021;
wire    ap_CS_fsm_state14;
reg   [2:0] a2_0_V_addr_6_reg_2026;
wire   [0:0] exitcond1_fu_1148_p2;
reg   [7:0] Bob_V_0_load_reg_2042;
wire    ap_CS_fsm_state15;
reg   [7:0] Bob_V_1_load_reg_2047;
wire  signed [23:0] p_Val2_16_fu_1723_p2;
reg  signed [23:0] p_Val2_16_reg_2052;
wire    ap_CS_fsm_state16;
reg   [0:0] tmp_30_reg_2057;
wire   [15:0] p_Val2_19_fu_1203_p2;
reg   [15:0] p_Val2_19_reg_2062;
wire    ap_CS_fsm_state17;
wire  signed [23:0] p_Val2_16_0_1_fu_1729_p2;
reg  signed [23:0] p_Val2_16_0_1_reg_2067;
reg   [0:0] tmp_31_reg_2072;
wire  signed [26:0] mf1_fu_1735_p2;
reg  signed [26:0] mf1_reg_2077;
wire    ap_CS_fsm_state19;
wire  signed [26:0] mt2_fu_1740_p2;
reg  signed [26:0] mt2_reg_2082;
wire   [23:0] mf3_fu_1251_p3;
reg   [23:0] mf3_reg_2087;
wire   [23:0] mt_fu_1258_p3;
reg   [23:0] mt_reg_2092;
wire   [1:0] i_3_fu_1271_p2;
reg   [1:0] i_3_reg_2100;
wire    ap_CS_fsm_state20;
wire   [0:0] tmp_32_fu_1277_p1;
reg   [0:0] tmp_32_reg_2105;
wire   [0:0] exitcond3_fu_1265_p2;
reg   [15:0] p_Val2_28_0_1_reg_2113;
reg   [0:0] tmp_34_reg_2118;
wire   [15:0] b1_0_0_V_2_fu_1443_p2;
reg   [15:0] b1_0_0_V_2_reg_2123;
wire    ap_CS_fsm_state21;
wire   [15:0] b1_0_1_V_4_fu_1496_p3;
wire    ap_CS_fsm_state22;
wire   [15:0] p_Val2_8_fu_1503_p3;
wire  signed [24:0] OP2_V_3_cast_cast_fu_1520_p1;
reg  signed [24:0] OP2_V_3_cast_cast_reg_2138;
wire    ap_CS_fsm_state23;
wire  signed [25:0] OP2_V_3_0_1_cast_cas_fu_1524_p1;
reg  signed [25:0] OP2_V_3_0_1_cast_cas_reg_2143;
wire   [2:0] i_5_fu_1534_p2;
reg   [2:0] i_5_reg_2151;
wire    ap_CS_fsm_state24;
reg   [2:0] a3_0_V_addr_6_reg_2156;
wire   [0:0] exitcond6_fu_1528_p2;
reg  signed [8:0] Ld_V_0_load_reg_2172;
wire    ap_CS_fsm_state25;
reg  signed [9:0] Ld_V_1_load_reg_2177;
wire   [23:0] tmp_37_fu_1550_p1;
reg   [23:0] tmp_37_reg_2182;
wire    ap_CS_fsm_state26;
reg   [0:0] tmp_38_reg_2187;
wire   [15:0] p_Val2_27_fu_1586_p2;
reg   [15:0] p_Val2_27_reg_2192;
wire    ap_CS_fsm_state27;
wire   [23:0] tmp_39_fu_1595_p1;
reg   [23:0] tmp_39_reg_2197;
reg   [0:0] tmp_40_reg_2202;
wire   [2:0] x_d_obs_V_addr_reg_2207;
wire    ap_CS_fsm_state29;
wire   [2:0] x_d_obs_V_addr_1_reg_2212;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire   [2:0] i_4_fu_1643_p2;
reg   [2:0] i_4_reg_2240;
wire    ap_CS_fsm_state32;
wire   [63:0] tmp_10_fu_1649_p1;
reg   [63:0] tmp_10_reg_2245;
wire   [0:0] exitcond9_fu_1637_p2;
reg   [2:0] a1_0_V_address0;
reg    a1_0_V_ce0;
reg    a1_0_V_we0;
wire   [15:0] a1_0_V_q0;
reg   [2:0] a1_0_V_address1;
reg    a1_0_V_ce1;
reg    a1_0_V_we1;
reg   [15:0] a1_0_V_d1;
reg   [2:0] a2_0_V_address0;
reg    a2_0_V_ce0;
reg    a2_0_V_we0;
wire   [15:0] a2_0_V_q0;
reg   [2:0] a2_0_V_address1;
reg    a2_0_V_ce1;
reg    a2_0_V_we1;
reg   [15:0] a2_0_V_d1;
reg   [2:0] a3_0_V_address0;
reg    a3_0_V_ce0;
reg    a3_0_V_we0;
wire   [15:0] a3_0_V_q0;
reg   [2:0] a3_0_V_address1;
reg    a3_0_V_ce1;
reg    a3_0_V_we1;
reg   [15:0] a3_0_V_d1;
reg   [2:0] x_d_obs_V_address0;
reg    x_d_obs_V_ce0;
reg    x_d_obs_V_we0;
reg   [15:0] x_d_obs_V_d0;
wire   [15:0] x_d_obs_V_q0;
reg   [2:0] x_d_obs_V_address1;
reg    x_d_obs_V_ce1;
reg    x_d_obs_V_we1;
wire   [15:0] x_d_obs_V_q1;
reg   [2:0] i_reg_690;
wire    ap_CS_fsm_state12;
reg   [2:0] i1_reg_701;
wire    ap_CS_fsm_state18;
reg   [15:0] p_Val2_7_reg_712;
reg   [15:0] p_Val2_6_reg_724;
reg   [1:0] i4_reg_736;
reg   [2:0] i7_reg_747;
wire    ap_CS_fsm_state28;
reg   [2:0] i5_reg_758;
wire    ap_CS_fsm_state33;
wire   [63:0] tmp_7_fu_869_p1;
wire   [63:0] tmp_8_fu_1160_p1;
wire   [63:0] tmp_6_fu_1540_p1;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire   [15:0] p_Val2_14_0_5_fu_1135_p2;
wire   [15:0] p_Val2_19_0_1_fu_1244_p2;
wire   [15:0] p_Val2_34_0_1_fu_1630_p2;
wire   [15:0] p_Val2_12_fu_1662_p2;
wire  signed [27:0] p_Val2_s_fu_1669_p2;
wire  signed [27:0] p_Val2_3_fu_1677_p2;
wire   [15:0] tmp_4_fu_809_p1;
wire   [15:0] tmp_s_fu_817_p1;
wire  signed [15:0] OP2_V_cast1_fu_825_p0;
wire  signed [15:0] OP2_V_cast_fu_829_p0;
wire  signed [15:0] OP2_V_0_1_cast1_fu_833_p0;
wire  signed [15:0] OP2_V_0_1_cast_fu_837_p0;
wire  signed [15:0] OP2_V_0_4_cast_fu_849_p0;
wire  signed [15:0] OP2_V_0_5_cast9_fu_853_p0;
wire   [23:0] tmp_2_fu_890_p3;
(* use_dsp48 = "no" *) wire   [23:0] p_Val2_20_fu_898_p2;
wire   [15:0] tmp_9_fu_913_p1;
wire   [15:0] p_Val2_13_fu_903_p4;
wire   [23:0] tmp_21_0_1_fu_932_p3;
(* use_dsp48 = "no" *) wire   [23:0] p_Val2_12_0_1_fu_939_p2;
wire   [15:0] tmp_24_0_1_fu_954_p1;
wire   [15:0] p_Val2_13_0_1_fu_944_p4;
wire  signed [6:0] Aob_V_2_load_cast8_fu_963_p1;
wire  signed [23:0] tmp_22_0_2_cast_fu_984_p1;
wire   [23:0] tmp_21_0_2_fu_977_p3;
wire   [23:0] p_Val2_12_0_2_fu_987_p2;
wire   [15:0] tmp_24_0_2_fu_1003_p1;
wire   [15:0] p_Val2_13_0_2_fu_993_p4;
wire   [23:0] tmp_21_0_3_fu_1022_p3;
(* use_dsp48 = "no" *) wire   [23:0] p_Val2_12_0_3_fu_1029_p2;
wire   [15:0] tmp_24_0_3_fu_1044_p1;
wire   [15:0] p_Val2_13_0_3_fu_1034_p4;
wire  signed [24:0] p_Val2_11_0_4_fu_1709_p2;
wire   [23:0] tmp_21_0_4_fu_1066_p3;
wire   [23:0] p_Val2_12_0_4_fu_1073_p2;
wire   [15:0] tmp_24_0_4_fu_1088_p1;
wire   [15:0] p_Val2_13_0_4_fu_1078_p4;
wire  signed [24:0] p_Val2_11_0_5_fu_1716_p2;
wire   [23:0] tmp_21_0_5_fu_1110_p3;
wire   [23:0] p_Val2_12_0_5_fu_1117_p2;
wire   [15:0] tmp_24_0_5_fu_1132_p1;
wire   [15:0] p_Val2_13_0_5_fu_1122_p4;
wire   [23:0] tmp_11_fu_1177_p3;
(* use_dsp48 = "no" *) wire   [23:0] p_Val2_17_fu_1185_p2;
wire   [15:0] p_Val2_18_fu_1190_p4;
wire   [15:0] tmp_12_fu_1200_p1;
wire   [23:0] tmp_31_0_1_fu_1219_p3;
(* use_dsp48 = "no" *) wire   [23:0] p_Val2_17_0_1_fu_1226_p2;
wire   [15:0] p_Val2_18_0_1_fu_1231_p4;
wire   [15:0] tmp_34_0_1_fu_1241_p1;
wire  signed [15:0] mf3_fu_1251_p1;
wire  signed [15:0] mt_fu_1258_p1;
wire   [15:0] tmp_13_fu_1288_p3;
wire   [23:0] tmp_14_fu_1296_p3;
wire   [26:0] p_Val2_21_fu_1281_p3;
wire   [27:0] tmp_46_cast_cast_fu_1304_p1;
wire   [27:0] tmp_47_0_cast_fu_1308_p1;
wire   [27:0] p_Val2_22_fu_1312_p2;
wire   [0:0] tmp_33_fu_1328_p3;
wire   [15:0] p_Val2_23_fu_1318_p4;
wire   [15:0] tmp_15_fu_1336_p1;
wire   [15:0] b1_0_0_V_fu_1340_p2;
wire   [23:0] tmp_46_0_1_fu_1353_p3;
wire   [26:0] p_Val2_26_0_1_fu_1346_p3;
wire   [27:0] tmp_46_0_1_cast_cast_fu_1361_p1;
wire   [27:0] tmp_47_0_1_cast_fu_1365_p1;
wire   [27:0] p_Val2_27_0_1_fu_1369_p2;
wire   [15:0] tmp_49_0_1_fu_1393_p1;
wire   [15:0] b1_0_0_V_1_fu_1396_p2;
wire   [23:0] p_Val2_26_0_4_fu_1401_p3;
wire   [23:0] tmp_46_0_4_fu_1407_p3;
wire   [23:0] tmp_16_fu_1415_p2;
wire   [0:0] tmp_35_fu_1431_p3;
wire   [15:0] p_Val2_28_0_4_fu_1421_p4;
wire   [15:0] tmp_49_0_4_fu_1439_p1;
wire   [23:0] p_Val2_26_0_5_fu_1449_p3;
wire   [23:0] tmp_46_0_5_fu_1455_p3;
wire   [23:0] tmp_17_fu_1462_p2;
wire   [0:0] tmp_36_fu_1478_p3;
wire   [15:0] p_Val2_28_0_5_fu_1468_p4;
wire   [15:0] tmp_49_0_5_fu_1486_p1;
wire   [15:0] b1_0_0_V_3_fu_1490_p2;
wire   [15:0] c1_V_fu_1510_p2;
wire   [15:0] c1_V_1_fu_1515_p2;
wire  signed [24:0] p_Val2_24_fu_1745_p2;
wire   [23:0] tmp_18_fu_1560_p3;
wire   [23:0] p_Val2_25_fu_1568_p2;
wire   [15:0] p_Val2_26_fu_1573_p4;
wire   [15:0] tmp_19_fu_1583_p1;
wire  signed [25:0] p_Val2_31_0_1_fu_1752_p2;
wire   [23:0] tmp_54_0_1_fu_1605_p3;
wire   [23:0] p_Val2_32_0_1_fu_1612_p2;
wire   [15:0] p_Val2_33_0_1_fu_1617_p4;
wire   [15:0] tmp_57_0_1_fu_1627_p1;
wire   [15:0] p_Val2_s_15_fu_1656_p2;
wire   [11:0] p_Val2_s_fu_1669_p1;
wire   [11:0] p_Val2_3_fu_1677_p1;
wire  signed [15:0] p_Val2_15_fu_1685_p0;
wire   [7:0] p_Val2_15_fu_1685_p1;
wire  signed [15:0] p_Val2_11_0_1_fu_1691_p0;
wire   [7:0] p_Val2_11_0_1_fu_1691_p1;
wire  signed [15:0] p_Val2_11_0_2_fu_1697_p0;
wire   [6:0] p_Val2_11_0_2_fu_1697_p1;
wire  signed [15:0] p_Val2_11_0_3_fu_1703_p0;
wire   [7:0] p_Val2_11_0_3_fu_1703_p1;
wire  signed [15:0] p_Val2_11_0_4_fu_1709_p0;
wire   [8:0] p_Val2_11_0_4_fu_1709_p1;
wire  signed [15:0] p_Val2_11_0_5_fu_1716_p0;
wire   [8:0] p_Val2_11_0_5_fu_1716_p1;
wire   [7:0] p_Val2_16_fu_1723_p0;
wire  signed [15:0] p_Val2_16_fu_1723_p1;
wire   [7:0] p_Val2_16_0_1_fu_1729_p0;
wire  signed [15:0] p_Val2_16_0_1_fu_1729_p1;
wire  signed [15:0] mf1_fu_1735_p0;
wire   [11:0] mf1_fu_1735_p1;
wire  signed [15:0] mt2_fu_1740_p0;
wire   [11:0] mt2_fu_1740_p1;
wire  signed [15:0] p_Val2_24_fu_1745_p1;
wire  signed [15:0] p_Val2_31_0_1_fu_1752_p1;
reg   [35:0] ap_NS_fsm;
wire   [23:0] p_Val2_11_0_1_fu_1691_p10;
wire   [22:0] p_Val2_11_0_2_fu_1697_p10;
wire   [23:0] p_Val2_11_0_3_fu_1703_p10;
wire   [24:0] p_Val2_11_0_4_fu_1709_p10;
wire   [24:0] p_Val2_11_0_5_fu_1716_p10;
wire   [23:0] p_Val2_15_fu_1685_p10;
wire   [23:0] p_Val2_16_0_1_fu_1729_p00;
wire   [23:0] p_Val2_16_fu_1723_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 36'd1;
end

state_observer_Aobkb #(
    .DataWidth( 8 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
Aob_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Aob_V_0_address0),
    .ce0(Aob_V_0_ce0),
    .q0(Aob_V_0_q0)
);

state_observer_Aocud #(
    .DataWidth( 8 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
Aob_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Aob_V_1_address0),
    .ce0(Aob_V_1_ce0),
    .q0(Aob_V_1_q0)
);

state_observer_AodEe #(
    .DataWidth( 5 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
Aob_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Aob_V_2_address0),
    .ce0(Aob_V_2_ce0),
    .q0(Aob_V_2_q0)
);

state_observer_AoeOg #(
    .DataWidth( 8 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
Aob_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Aob_V_3_address0),
    .ce0(Aob_V_3_ce0),
    .q0(Aob_V_3_q0)
);

state_observer_AofYi #(
    .DataWidth( 9 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
Aob_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Aob_V_4_address0),
    .ce0(Aob_V_4_ce0),
    .q0(Aob_V_4_q0)
);

state_observer_Aog8j #(
    .DataWidth( 9 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
Aob_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Aob_V_5_address0),
    .ce0(Aob_V_5_ce0),
    .q0(Aob_V_5_q0)
);

state_observer_Bohbi #(
    .DataWidth( 8 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
Bob_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Bob_V_0_address0),
    .ce0(Bob_V_0_ce0),
    .q0(Bob_V_0_q0)
);

state_observer_Boibs #(
    .DataWidth( 8 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
Bob_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Bob_V_1_address0),
    .ce0(Bob_V_1_ce0),
    .q0(Bob_V_1_q0)
);

state_observer_LdjbC #(
    .DataWidth( 9 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
Ld_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Ld_V_0_address0),
    .ce0(Ld_V_0_ce0),
    .q0(Ld_V_0_q0)
);

state_observer_LdkbM #(
    .DataWidth( 10 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
Ld_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Ld_V_1_address0),
    .ce0(Ld_V_1_ce0),
    .q0(Ld_V_1_q0)
);

state_observer_a1lbW #(
    .DataWidth( 16 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
a1_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(a1_0_V_address0),
    .ce0(a1_0_V_ce0),
    .we0(a1_0_V_we0),
    .d0(16'd0),
    .q0(a1_0_V_q0),
    .address1(a1_0_V_address1),
    .ce1(a1_0_V_ce1),
    .we1(a1_0_V_we1),
    .d1(a1_0_V_d1)
);

state_observer_a1lbW #(
    .DataWidth( 16 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
a2_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(a2_0_V_address0),
    .ce0(a2_0_V_ce0),
    .we0(a2_0_V_we0),
    .d0(16'd0),
    .q0(a2_0_V_q0),
    .address1(a2_0_V_address1),
    .ce1(a2_0_V_ce1),
    .we1(a2_0_V_we1),
    .d1(a2_0_V_d1)
);

state_observer_a1lbW #(
    .DataWidth( 16 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
a3_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(a3_0_V_address0),
    .ce0(a3_0_V_ce0),
    .we0(a3_0_V_we0),
    .d0(16'd0),
    .q0(a3_0_V_q0),
    .address1(a3_0_V_address1),
    .ce1(a3_0_V_ce1),
    .we1(a3_0_V_we1),
    .d1(a3_0_V_d1)
);

state_observer_x_ocq #(
    .DataWidth( 16 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
x_d_obs_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_d_obs_V_address0),
    .ce0(x_d_obs_V_ce0),
    .we0(x_d_obs_V_we0),
    .d0(x_d_obs_V_d0),
    .q0(x_d_obs_V_q0),
    .address1(x_d_obs_V_address1),
    .ce1(x_d_obs_V_ce1),
    .we1(x_d_obs_V_we1),
    .d1(16'd0),
    .q1(x_d_obs_V_q1)
);

state_observer_mupcA #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 28 ))
state_observer_mupcA_U1(
    .din0(x1_V),
    .din1(p_Val2_s_fu_1669_p1),
    .dout(p_Val2_s_fu_1669_p2)
);

state_observer_mupcA #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 28 ))
state_observer_mupcA_U2(
    .din0(x2_V),
    .din1(p_Val2_3_fu_1677_p1),
    .dout(p_Val2_3_fu_1677_p2)
);

state_observer_muqcK #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
state_observer_muqcK_U3(
    .din0(p_Val2_15_fu_1685_p0),
    .din1(p_Val2_15_fu_1685_p1),
    .dout(p_Val2_15_fu_1685_p2)
);

state_observer_muqcK #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
state_observer_muqcK_U4(
    .din0(p_Val2_11_0_1_fu_1691_p0),
    .din1(p_Val2_11_0_1_fu_1691_p1),
    .dout(p_Val2_11_0_1_fu_1691_p2)
);

state_observer_murcU #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 23 ))
state_observer_murcU_U5(
    .din0(p_Val2_11_0_2_fu_1697_p0),
    .din1(p_Val2_11_0_2_fu_1697_p1),
    .dout(p_Val2_11_0_2_fu_1697_p2)
);

state_observer_muqcK #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
state_observer_muqcK_U6(
    .din0(p_Val2_11_0_3_fu_1703_p0),
    .din1(p_Val2_11_0_3_fu_1703_p1),
    .dout(p_Val2_11_0_3_fu_1703_p2)
);

state_observer_musc4 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 25 ))
state_observer_musc4_U7(
    .din0(p_Val2_11_0_4_fu_1709_p0),
    .din1(p_Val2_11_0_4_fu_1709_p1),
    .dout(p_Val2_11_0_4_fu_1709_p2)
);

state_observer_musc4 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 25 ))
state_observer_musc4_U8(
    .din0(p_Val2_11_0_5_fu_1716_p0),
    .din1(p_Val2_11_0_5_fu_1716_p1),
    .dout(p_Val2_11_0_5_fu_1716_p2)
);

state_observer_mutde #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
state_observer_mutde_U9(
    .din0(p_Val2_16_fu_1723_p0),
    .din1(p_Val2_16_fu_1723_p1),
    .dout(p_Val2_16_fu_1723_p2)
);

state_observer_mutde #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
state_observer_mutde_U10(
    .din0(p_Val2_16_0_1_fu_1729_p0),
    .din1(p_Val2_16_0_1_fu_1729_p1),
    .dout(p_Val2_16_0_1_fu_1729_p2)
);

state_observer_muudo #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 27 ))
state_observer_muudo_U11(
    .din0(mf1_fu_1735_p0),
    .din1(mf1_fu_1735_p1),
    .dout(mf1_fu_1735_p2)
);

state_observer_muudo #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 27 ))
state_observer_muudo_U12(
    .din0(mt2_fu_1740_p0),
    .din1(mt2_fu_1740_p1),
    .dout(mt2_fu_1740_p2)
);

state_observer_muvdy #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 25 ))
state_observer_muvdy_U13(
    .din0(Ld_V_0_load_reg_2172),
    .din1(p_Val2_24_fu_1745_p1),
    .dout(p_Val2_24_fu_1745_p2)
);

state_observer_muwdI #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 26 ))
state_observer_muwdI_U14(
    .din0(Ld_V_1_load_reg_2177),
    .din1(p_Val2_31_0_1_fu_1752_p1),
    .dout(p_Val2_31_0_1_fu_1752_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i1_reg_701 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        i1_reg_701 <= i_2_reg_2021;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        i4_reg_736 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        i4_reg_736 <= i_3_reg_2100;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        i5_reg_758 <= i_4_reg_2240;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        i5_reg_758 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        i7_reg_747 <= i_5_reg_2151;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        i7_reg_747 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_reg_690 <= i_1_reg_1852;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_690 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        p_Val2_6_reg_724 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        p_Val2_6_reg_724 <= p_Val2_8_fu_1503_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        p_Val2_7_reg_712 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        p_Val2_7_reg_712 <= b1_0_1_V_4_fu_1496_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Aob_V_0_load_reg_1893 <= Aob_V_0_q0;
        Aob_V_1_load_reg_1898 <= Aob_V_1_q0;
        Aob_V_2_load_reg_1903 <= Aob_V_2_q0;
        Aob_V_3_load_reg_1908 <= Aob_V_3_q0;
        Aob_V_4_load_reg_1913 <= Aob_V_4_q0;
        Aob_V_5_load_reg_1918 <= Aob_V_5_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        Bob_V_0_load_reg_2042 <= Bob_V_0_q0;
        Bob_V_1_load_reg_2047 <= Bob_V_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        Ld_V_0_load_reg_2172 <= Ld_V_0_q0;
        Ld_V_1_load_reg_2177 <= Ld_V_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OP2_V_0_1_cast1_reg_1819 <= OP2_V_0_1_cast1_fu_833_p1;
        OP2_V_0_1_cast_reg_1824 <= OP2_V_0_1_cast_fu_837_p1;
        OP2_V_0_2_cast_reg_1829 <= OP2_V_0_2_cast_fu_841_p1;
        OP2_V_0_3_cast_reg_1834 <= OP2_V_0_3_cast_fu_845_p1;
        OP2_V_0_4_cast_reg_1839 <= OP2_V_0_4_cast_fu_849_p1;
        OP2_V_0_5_cast9_reg_1844 <= OP2_V_0_5_cast9_fu_853_p1;
        OP2_V_cast1_reg_1809 <= OP2_V_cast1_fu_825_p1;
        OP2_V_cast_reg_1814 <= OP2_V_cast_fu_829_p1;
        p_Val2_2_reg_1799 <= p_Val2_2_fu_812_p2;
        p_Val2_5_reg_1804 <= p_Val2_5_fu_820_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        OP2_V_1_0_1_cast_reg_2013 <= OP2_V_1_0_1_cast_fu_1145_p1;
        OP2_V_1_cast_reg_2008 <= OP2_V_1_cast_fu_1142_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        OP2_V_3_0_1_cast_cas_reg_2143 <= OP2_V_3_0_1_cast_cas_fu_1524_p1;
        OP2_V_3_cast_cast_reg_2138 <= OP2_V_3_cast_cast_fu_1520_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_857_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        a1_0_V_addr_6_reg_1857 <= tmp_7_fu_869_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1148_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        a2_0_V_addr_6_reg_2026 <= tmp_8_fu_1160_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_1528_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        a3_0_V_addr_6_reg_2156 <= tmp_6_fu_1540_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        b1_0_0_V_2_reg_2123 <= b1_0_0_V_2_fu_1443_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_1_reg_1852 <= i_1_fu_863_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_2_reg_2021 <= i_2_fu_1154_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i_3_reg_2100 <= i_3_fu_1271_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        i_4_reg_2240 <= i_4_fu_1643_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        i_5_reg_2151 <= i_5_fu_1534_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        mf1_reg_2077 <= mf1_fu_1735_p2;
        mf3_reg_2087[23 : 8] <= mf3_fu_1251_p3[23 : 8];
        mt2_reg_2082 <= mt2_fu_1740_p2;
        mt_reg_2092[23 : 8] <= mt_fu_1258_p3[23 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_Val2_11_0_1_reg_1938 <= p_Val2_11_0_1_fu_1691_p2;
        p_Val2_14_reg_1933 <= p_Val2_14_fu_916_p2;
        tmp_23_reg_1943 <= p_Val2_11_0_1_fu_1691_p2[32'd7];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_11_0_2_reg_1953 <= p_Val2_11_0_2_fu_1697_p2;
        p_Val2_14_0_1_reg_1948 <= p_Val2_14_0_1_fu_957_p2;
        tmp_24_reg_1958 <= p_Val2_11_0_2_fu_1697_p2[32'd7];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_Val2_11_0_3_reg_1968 <= p_Val2_11_0_3_fu_1703_p2;
        p_Val2_14_0_2_reg_1963 <= p_Val2_14_0_2_fu_1006_p2;
        tmp_25_reg_1973 <= p_Val2_11_0_3_fu_1703_p2[32'd7];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_Val2_14_0_3_reg_1978 <= p_Val2_14_0_3_fu_1047_p2;
        tmp_26_reg_1983 <= tmp_26_fu_1056_p1;
        tmp_27_reg_1988 <= p_Val2_11_0_4_fu_1709_p2[32'd7];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_Val2_14_0_4_reg_1993 <= p_Val2_14_0_4_fu_1091_p2;
        tmp_28_reg_1998 <= tmp_28_fu_1100_p1;
        tmp_29_reg_2003 <= p_Val2_11_0_5_fu_1716_p2[32'd7];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_15_reg_1923 <= p_Val2_15_fu_1685_p2;
        tmp_22_reg_1928 <= p_Val2_15_fu_1685_p2[32'd7];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        p_Val2_16_0_1_reg_2067 <= p_Val2_16_0_1_fu_1729_p2;
        p_Val2_19_reg_2062 <= p_Val2_19_fu_1203_p2;
        tmp_31_reg_2072 <= p_Val2_16_0_1_fu_1729_p2[32'd7];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        p_Val2_16_reg_2052 <= p_Val2_16_fu_1723_p2;
        tmp_30_reg_2057 <= p_Val2_16_fu_1723_p2[32'd7];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_Val2_1_reg_1759 <= {{p_Val2_s_fu_1669_p2[23:8]}};
        p_Val2_4_reg_1769 <= {{p_Val2_3_fu_1677_p2[23:8]}};
        tmp_20_reg_1764 <= p_Val2_s_fu_1669_p2[32'd7];
        tmp_21_reg_1774 <= p_Val2_3_fu_1677_p2[32'd7];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        p_Val2_27_reg_2192 <= p_Val2_27_fu_1586_p2;
        tmp_39_reg_2197 <= tmp_39_fu_1595_p1;
        tmp_40_reg_2202 <= p_Val2_31_0_1_fu_1752_p2[32'd7];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_1265_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        p_Val2_28_0_1_reg_2113 <= {{p_Val2_27_0_1_fu_1369_p2[23:8]}};
        tmp_32_reg_2105 <= tmp_32_fu_1277_p1;
        tmp_34_reg_2118 <= p_Val2_26_0_1_fu_1346_p3[32'd7];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond9_fu_1637_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state32))) begin
        tmp_10_reg_2245[2 : 0] <= tmp_10_fu_1649_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tmp_37_reg_2182 <= tmp_37_fu_1550_p1;
        tmp_38_reg_2187 <= p_Val2_24_fu_1745_p2[32'd7];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Aob_V_0_ce0 = 1'b1;
    end else begin
        Aob_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Aob_V_1_ce0 = 1'b1;
    end else begin
        Aob_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Aob_V_2_ce0 = 1'b1;
    end else begin
        Aob_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Aob_V_3_ce0 = 1'b1;
    end else begin
        Aob_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Aob_V_4_ce0 = 1'b1;
    end else begin
        Aob_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Aob_V_5_ce0 = 1'b1;
    end else begin
        Aob_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        Bob_V_0_ce0 = 1'b1;
    end else begin
        Bob_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        Bob_V_1_ce0 = 1'b1;
    end else begin
        Bob_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        Ld_V_0_ce0 = 1'b1;
    end else begin
        Ld_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        Ld_V_1_ce0 = 1'b1;
    end else begin
        Ld_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        a1_0_V_address0 = tmp_10_fu_1649_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        a1_0_V_address0 = a1_0_V_addr_6_reg_1857;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a1_0_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a1_0_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        a1_0_V_address0 = 64'd0;
    end else begin
        a1_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        a1_0_V_address1 = a1_0_V_addr_6_reg_1857;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a1_0_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a1_0_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        a1_0_V_address1 = 64'd1;
    end else begin
        a1_0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        a1_0_V_ce0 = 1'b1;
    end else begin
        a1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        a1_0_V_ce1 = 1'b1;
    end else begin
        a1_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        a1_0_V_d1 = p_Val2_14_0_5_fu_1135_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        a1_0_V_d1 = 16'd0;
    end else begin
        a1_0_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        a1_0_V_we0 = 1'b1;
    end else begin
        a1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        a1_0_V_we1 = 1'b1;
    end else begin
        a1_0_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        a2_0_V_address0 = tmp_10_fu_1649_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        a2_0_V_address0 = a2_0_V_addr_6_reg_2026;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a2_0_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a2_0_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        a2_0_V_address0 = 64'd0;
    end else begin
        a2_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        a2_0_V_address1 = a2_0_V_addr_6_reg_2026;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a2_0_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a2_0_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        a2_0_V_address1 = 64'd1;
    end else begin
        a2_0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        a2_0_V_ce0 = 1'b1;
    end else begin
        a2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        a2_0_V_ce1 = 1'b1;
    end else begin
        a2_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        a2_0_V_d1 = p_Val2_19_0_1_fu_1244_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        a2_0_V_d1 = 16'd0;
    end else begin
        a2_0_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        a2_0_V_we0 = 1'b1;
    end else begin
        a2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        a2_0_V_we1 = 1'b1;
    end else begin
        a2_0_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        a3_0_V_address0 = tmp_10_fu_1649_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        a3_0_V_address0 = a3_0_V_addr_6_reg_2156;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a3_0_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a3_0_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        a3_0_V_address0 = 64'd0;
    end else begin
        a3_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        a3_0_V_address1 = a3_0_V_addr_6_reg_2156;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a3_0_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a3_0_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        a3_0_V_address1 = 64'd1;
    end else begin
        a3_0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        a3_0_V_ce0 = 1'b1;
    end else begin
        a3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        a3_0_V_ce1 = 1'b1;
    end else begin
        a3_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        a3_0_V_d1 = p_Val2_34_0_1_fu_1630_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        a3_0_V_d1 = 16'd0;
    end else begin
        a3_0_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        a3_0_V_we0 = 1'b1;
    end else begin
        a3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        a3_0_V_we1 = 1'b1;
    end else begin
        a3_0_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        x_d_obs_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        x_d_obs_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        x_d_obs_V_address0 = tmp_10_reg_2245;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        x_d_obs_V_address0 = x_d_obs_V_addr_reg_2207;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        x_d_obs_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        x_d_obs_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        x_d_obs_V_address0 = 64'd0;
    end else begin
        x_d_obs_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        x_d_obs_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        x_d_obs_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        x_d_obs_V_address1 = x_d_obs_V_addr_1_reg_2212;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        x_d_obs_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        x_d_obs_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        x_d_obs_V_address1 = 64'd1;
    end else begin
        x_d_obs_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29))) begin
        x_d_obs_V_ce0 = 1'b1;
    end else begin
        x_d_obs_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29))) begin
        x_d_obs_V_ce1 = 1'b1;
    end else begin
        x_d_obs_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        x_d_obs_V_d0 = p_Val2_12_fu_1662_p2;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29))) begin
        x_d_obs_V_d0 = 16'd0;
    end else begin
        x_d_obs_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29))) begin
        x_d_obs_V_we0 = 1'b1;
    end else begin
        x_d_obs_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29))) begin
        x_d_obs_V_we1 = 1'b1;
    end else begin
        x_d_obs_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        x_obs_0_o_V_ap_vld = 1'b1;
    end else begin
        x_obs_0_o_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        x_obs_1_o_V_ap_vld = 1'b1;
    end else begin
        x_obs_1_o_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        x_obs_2_o_V_ap_vld = 1'b1;
    end else begin
        x_obs_2_o_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        x_obs_3_o_V_ap_vld = 1'b1;
    end else begin
        x_obs_3_o_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        x_obs_4_o_V_ap_vld = 1'b1;
    end else begin
        x_obs_4_o_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        x_obs_5_o_V_ap_vld = 1'b1;
    end else begin
        x_obs_5_o_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_857_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((exitcond1_fu_1148_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((exitcond3_fu_1265_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((exitcond6_fu_1528_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if (((exitcond9_fu_1637_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Aob_V_0_address0 = tmp_7_fu_869_p1;

assign Aob_V_1_address0 = tmp_7_fu_869_p1;

assign Aob_V_2_address0 = tmp_7_fu_869_p1;

assign Aob_V_2_load_cast8_fu_963_p1 = $signed(Aob_V_2_load_reg_1903);

assign Aob_V_3_address0 = tmp_7_fu_869_p1;

assign Aob_V_4_address0 = tmp_7_fu_869_p1;

assign Aob_V_5_address0 = tmp_7_fu_869_p1;

assign Bob_V_0_address0 = tmp_8_fu_1160_p1;

assign Bob_V_1_address0 = tmp_8_fu_1160_p1;

assign Ld_V_0_address0 = tmp_6_fu_1540_p1;

assign Ld_V_1_address0 = tmp_6_fu_1540_p1;

assign OP2_V_0_1_cast1_fu_833_p0 = x_obs_old_1_V;

assign OP2_V_0_1_cast1_fu_833_p1 = OP2_V_0_1_cast1_fu_833_p0;

assign OP2_V_0_1_cast_fu_837_p0 = x_obs_old_1_V;

assign OP2_V_0_1_cast_fu_837_p1 = OP2_V_0_1_cast_fu_837_p0;

assign OP2_V_0_2_cast_fu_841_p1 = $signed(x_obs_old_2_V);

assign OP2_V_0_3_cast_fu_845_p1 = $signed(x_obs_old_3_V);

assign OP2_V_0_4_cast_fu_849_p0 = x_obs_old_4_V;

assign OP2_V_0_4_cast_fu_849_p1 = OP2_V_0_4_cast_fu_849_p0;

assign OP2_V_0_5_cast9_fu_853_p0 = x_obs_old_5_V;

assign OP2_V_0_5_cast9_fu_853_p1 = OP2_V_0_5_cast9_fu_853_p0;

assign OP2_V_1_0_1_cast_fu_1145_p1 = $signed(u_2_V);

assign OP2_V_1_cast_fu_1142_p1 = $signed(u_1_V);

assign OP2_V_3_0_1_cast_cas_fu_1524_p1 = $signed(c1_V_1_fu_1515_p2);

assign OP2_V_3_cast_cast_fu_1520_p1 = $signed(c1_V_fu_1510_p2);

assign OP2_V_cast1_fu_825_p0 = x_obs_old_0_V;

assign OP2_V_cast1_fu_825_p1 = OP2_V_cast1_fu_825_p0;

assign OP2_V_cast_fu_829_p0 = x_obs_old_0_V;

assign OP2_V_cast_fu_829_p1 = OP2_V_cast_fu_829_p0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign b1_0_0_V_1_fu_1396_p2 = (p_Val2_28_0_1_reg_2113 + tmp_49_0_1_fu_1393_p1);

assign b1_0_0_V_2_fu_1443_p2 = (p_Val2_28_0_4_fu_1421_p4 + tmp_49_0_4_fu_1439_p1);

assign b1_0_0_V_3_fu_1490_p2 = (p_Val2_28_0_5_fu_1468_p4 + tmp_49_0_5_fu_1486_p1);

assign b1_0_0_V_fu_1340_p2 = (p_Val2_23_fu_1318_p4 + tmp_15_fu_1336_p1);

assign b1_0_1_V_4_fu_1496_p3 = ((tmp_32_reg_2105[0:0] === 1'b1) ? b1_0_0_V_3_fu_1490_p2 : p_Val2_7_reg_712);

assign c1_V_1_fu_1515_p2 = (p_Val2_7_reg_712 - p_Val2_5_reg_1804);

assign c1_V_fu_1510_p2 = (p_Val2_6_reg_724 - p_Val2_2_reg_1799);

assign exitcond1_fu_1148_p2 = ((i1_reg_701 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond3_fu_1265_p2 = ((i4_reg_736 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond6_fu_1528_p2 = ((i7_reg_747 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond9_fu_1637_p2 = ((i5_reg_758 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond_fu_857_p2 = ((i_reg_690 == 3'd6) ? 1'b1 : 1'b0);

assign i_1_fu_863_p2 = (i_reg_690 + 3'd1);

assign i_2_fu_1154_p2 = (i1_reg_701 + 3'd1);

assign i_3_fu_1271_p2 = (i4_reg_736 + 2'd1);

assign i_4_fu_1643_p2 = (i5_reg_758 + 3'd1);

assign i_5_fu_1534_p2 = (i7_reg_747 + 3'd1);

assign mf1_fu_1735_p0 = OP2_V_cast_reg_1814;

assign mf1_fu_1735_p1 = 27'd1542;

assign mf3_fu_1251_p1 = x_obs_old_4_V;

assign mf3_fu_1251_p3 = {{mf3_fu_1251_p1}, {8'd0}};

assign mt2_fu_1740_p0 = OP2_V_0_1_cast_reg_1824;

assign mt2_fu_1740_p1 = 27'd1542;

assign mt_fu_1258_p1 = x_obs_old_5_V;

assign mt_fu_1258_p3 = {{mt_fu_1258_p1}, {8'd0}};

assign p_Val2_11_0_1_fu_1691_p0 = OP2_V_0_1_cast1_reg_1819;

assign p_Val2_11_0_1_fu_1691_p1 = p_Val2_11_0_1_fu_1691_p10;

assign p_Val2_11_0_1_fu_1691_p10 = Aob_V_1_load_reg_1898;

assign p_Val2_11_0_2_fu_1697_p0 = OP2_V_0_2_cast_reg_1829;

assign p_Val2_11_0_2_fu_1697_p1 = p_Val2_11_0_2_fu_1697_p10;

assign p_Val2_11_0_2_fu_1697_p10 = $unsigned(Aob_V_2_load_cast8_fu_963_p1);

assign p_Val2_11_0_3_fu_1703_p0 = OP2_V_0_3_cast_reg_1834;

assign p_Val2_11_0_3_fu_1703_p1 = p_Val2_11_0_3_fu_1703_p10;

assign p_Val2_11_0_3_fu_1703_p10 = Aob_V_3_load_reg_1908;

assign p_Val2_11_0_4_fu_1709_p0 = OP2_V_0_4_cast_reg_1839;

assign p_Val2_11_0_4_fu_1709_p1 = p_Val2_11_0_4_fu_1709_p10;

assign p_Val2_11_0_4_fu_1709_p10 = Aob_V_4_load_reg_1913;

assign p_Val2_11_0_5_fu_1716_p0 = OP2_V_0_5_cast9_reg_1844;

assign p_Val2_11_0_5_fu_1716_p1 = p_Val2_11_0_5_fu_1716_p10;

assign p_Val2_11_0_5_fu_1716_p10 = Aob_V_5_load_reg_1918;

assign p_Val2_12_0_1_fu_939_p2 = ($signed(p_Val2_11_0_1_reg_1938) + $signed(tmp_21_0_1_fu_932_p3));

assign p_Val2_12_0_2_fu_987_p2 = ($signed(tmp_22_0_2_cast_fu_984_p1) + $signed(tmp_21_0_2_fu_977_p3));

assign p_Val2_12_0_3_fu_1029_p2 = ($signed(p_Val2_11_0_3_reg_1968) + $signed(tmp_21_0_3_fu_1022_p3));

assign p_Val2_12_0_4_fu_1073_p2 = (tmp_26_reg_1983 + tmp_21_0_4_fu_1066_p3);

assign p_Val2_12_0_5_fu_1117_p2 = (tmp_28_reg_1998 + tmp_21_0_5_fu_1110_p3);

assign p_Val2_12_fu_1662_p2 = (p_Val2_s_15_fu_1656_p2 - a3_0_V_q0);

assign p_Val2_13_0_1_fu_944_p4 = {{p_Val2_12_0_1_fu_939_p2[23:8]}};

assign p_Val2_13_0_2_fu_993_p4 = {{p_Val2_12_0_2_fu_987_p2[23:8]}};

assign p_Val2_13_0_3_fu_1034_p4 = {{p_Val2_12_0_3_fu_1029_p2[23:8]}};

assign p_Val2_13_0_4_fu_1078_p4 = {{p_Val2_12_0_4_fu_1073_p2[23:8]}};

assign p_Val2_13_0_5_fu_1122_p4 = {{p_Val2_12_0_5_fu_1117_p2[23:8]}};

assign p_Val2_13_fu_903_p4 = {{p_Val2_20_fu_898_p2[23:8]}};

assign p_Val2_14_0_1_fu_957_p2 = (tmp_24_0_1_fu_954_p1 + p_Val2_13_0_1_fu_944_p4);

assign p_Val2_14_0_2_fu_1006_p2 = (tmp_24_0_2_fu_1003_p1 + p_Val2_13_0_2_fu_993_p4);

assign p_Val2_14_0_3_fu_1047_p2 = (tmp_24_0_3_fu_1044_p1 + p_Val2_13_0_3_fu_1034_p4);

assign p_Val2_14_0_4_fu_1091_p2 = (tmp_24_0_4_fu_1088_p1 + p_Val2_13_0_4_fu_1078_p4);

assign p_Val2_14_0_5_fu_1135_p2 = (tmp_24_0_5_fu_1132_p1 + p_Val2_13_0_5_fu_1122_p4);

assign p_Val2_14_fu_916_p2 = (tmp_9_fu_913_p1 + p_Val2_13_fu_903_p4);

assign p_Val2_15_fu_1685_p0 = OP2_V_cast1_reg_1809;

assign p_Val2_15_fu_1685_p1 = p_Val2_15_fu_1685_p10;

assign p_Val2_15_fu_1685_p10 = Aob_V_0_load_reg_1893;

assign p_Val2_16_0_1_fu_1729_p0 = p_Val2_16_0_1_fu_1729_p00;

assign p_Val2_16_0_1_fu_1729_p00 = Bob_V_1_load_reg_2047;

assign p_Val2_16_0_1_fu_1729_p1 = OP2_V_1_0_1_cast_reg_2013;

assign p_Val2_16_fu_1723_p0 = p_Val2_16_fu_1723_p00;

assign p_Val2_16_fu_1723_p00 = Bob_V_0_load_reg_2042;

assign p_Val2_16_fu_1723_p1 = OP2_V_1_cast_reg_2008;

assign p_Val2_17_0_1_fu_1226_p2 = ($signed(tmp_31_0_1_fu_1219_p3) + $signed(p_Val2_16_0_1_reg_2067));

assign p_Val2_17_fu_1185_p2 = ($signed(tmp_11_fu_1177_p3) + $signed(p_Val2_16_reg_2052));

assign p_Val2_18_0_1_fu_1231_p4 = {{p_Val2_17_0_1_fu_1226_p2[23:8]}};

assign p_Val2_18_fu_1190_p4 = {{p_Val2_17_fu_1185_p2[23:8]}};

assign p_Val2_19_0_1_fu_1244_p2 = (p_Val2_18_0_1_fu_1231_p4 + tmp_34_0_1_fu_1241_p1);

assign p_Val2_19_fu_1203_p2 = (p_Val2_18_fu_1190_p4 + tmp_12_fu_1200_p1);

assign p_Val2_20_fu_898_p2 = ($signed(p_Val2_15_reg_1923) + $signed(tmp_2_fu_890_p3));

assign p_Val2_21_fu_1281_p3 = ((tmp_32_fu_1277_p1[0:0] === 1'b1) ? 27'd0 : mf1_reg_2077);

assign p_Val2_22_fu_1312_p2 = (tmp_46_cast_cast_fu_1304_p1 + tmp_47_0_cast_fu_1308_p1);

assign p_Val2_23_fu_1318_p4 = {{p_Val2_22_fu_1312_p2[23:8]}};

assign p_Val2_24_fu_1745_p1 = OP2_V_3_cast_cast_reg_2138;

assign p_Val2_25_fu_1568_p2 = (tmp_18_fu_1560_p3 + tmp_37_reg_2182);

assign p_Val2_26_0_1_fu_1346_p3 = ((tmp_32_fu_1277_p1[0:0] === 1'b1) ? mt2_reg_2082 : 27'd0);

assign p_Val2_26_0_4_fu_1401_p3 = ((tmp_32_reg_2105[0:0] === 1'b1) ? 24'd0 : mf3_reg_2087);

assign p_Val2_26_0_5_fu_1449_p3 = ((tmp_32_reg_2105[0:0] === 1'b1) ? mt_reg_2092 : 24'd0);

assign p_Val2_26_fu_1573_p4 = {{p_Val2_25_fu_1568_p2[23:8]}};

assign p_Val2_27_0_1_fu_1369_p2 = (tmp_46_0_1_cast_cast_fu_1361_p1 + tmp_47_0_1_cast_fu_1365_p1);

assign p_Val2_27_fu_1586_p2 = (p_Val2_26_fu_1573_p4 + tmp_19_fu_1583_p1);

assign p_Val2_28_0_4_fu_1421_p4 = {{tmp_16_fu_1415_p2[23:8]}};

assign p_Val2_28_0_5_fu_1468_p4 = {{tmp_17_fu_1462_p2[23:8]}};

assign p_Val2_2_fu_812_p2 = (p_Val2_1_reg_1759 + tmp_4_fu_809_p1);

assign p_Val2_31_0_1_fu_1752_p1 = OP2_V_3_0_1_cast_cas_reg_2143;

assign p_Val2_32_0_1_fu_1612_p2 = (tmp_54_0_1_fu_1605_p3 + tmp_39_reg_2197);

assign p_Val2_33_0_1_fu_1617_p4 = {{p_Val2_32_0_1_fu_1612_p2[23:8]}};

assign p_Val2_34_0_1_fu_1630_p2 = (p_Val2_33_0_1_fu_1617_p4 + tmp_57_0_1_fu_1627_p1);

assign p_Val2_3_fu_1677_p1 = 28'd1830;

assign p_Val2_5_fu_820_p2 = (p_Val2_4_reg_1769 + tmp_s_fu_817_p1);

assign p_Val2_8_fu_1503_p3 = ((tmp_32_reg_2105[0:0] === 1'b1) ? p_Val2_6_reg_724 : b1_0_0_V_3_fu_1490_p2);

assign p_Val2_s_15_fu_1656_p2 = (a1_0_V_q0 + a2_0_V_q0);

assign p_Val2_s_fu_1669_p1 = 28'd1830;

assign tmp_10_fu_1649_p1 = i5_reg_758;

assign tmp_11_fu_1177_p3 = {{a2_0_V_q0}, {8'd0}};

assign tmp_12_fu_1200_p1 = tmp_30_reg_2057;

assign tmp_13_fu_1288_p3 = ((tmp_32_fu_1277_p1[0:0] === 1'b1) ? p_Val2_7_reg_712 : p_Val2_6_reg_724);

assign tmp_14_fu_1296_p3 = {{tmp_13_fu_1288_p3}, {8'd0}};

assign tmp_15_fu_1336_p1 = tmp_33_fu_1328_p3;

assign tmp_16_fu_1415_p2 = (p_Val2_26_0_4_fu_1401_p3 + tmp_46_0_4_fu_1407_p3);

assign tmp_17_fu_1462_p2 = (p_Val2_26_0_5_fu_1449_p3 + tmp_46_0_5_fu_1455_p3);

assign tmp_18_fu_1560_p3 = {{a3_0_V_q0}, {8'd0}};

assign tmp_19_fu_1583_p1 = tmp_38_reg_2187;

assign tmp_21_0_1_fu_932_p3 = {{p_Val2_14_reg_1933}, {8'd0}};

assign tmp_21_0_2_fu_977_p3 = {{p_Val2_14_0_1_reg_1948}, {8'd0}};

assign tmp_21_0_3_fu_1022_p3 = {{p_Val2_14_0_2_reg_1963}, {8'd0}};

assign tmp_21_0_4_fu_1066_p3 = {{p_Val2_14_0_3_reg_1978}, {8'd0}};

assign tmp_21_0_5_fu_1110_p3 = {{p_Val2_14_0_4_reg_1993}, {8'd0}};

assign tmp_22_0_2_cast_fu_984_p1 = p_Val2_11_0_2_reg_1953;

assign tmp_24_0_1_fu_954_p1 = tmp_23_reg_1943;

assign tmp_24_0_2_fu_1003_p1 = tmp_24_reg_1958;

assign tmp_24_0_3_fu_1044_p1 = tmp_25_reg_1973;

assign tmp_24_0_4_fu_1088_p1 = tmp_27_reg_1988;

assign tmp_24_0_5_fu_1132_p1 = tmp_29_reg_2003;

assign tmp_26_fu_1056_p1 = p_Val2_11_0_4_fu_1709_p2[23:0];

assign tmp_28_fu_1100_p1 = p_Val2_11_0_5_fu_1716_p2[23:0];

assign tmp_2_fu_890_p3 = {{a1_0_V_q0}, {8'd0}};

assign tmp_31_0_1_fu_1219_p3 = {{p_Val2_19_reg_2062}, {8'd0}};

assign tmp_32_fu_1277_p1 = i4_reg_736[0:0];

assign tmp_33_fu_1328_p3 = p_Val2_21_fu_1281_p3[32'd7];

assign tmp_34_0_1_fu_1241_p1 = tmp_31_reg_2072;

assign tmp_35_fu_1431_p3 = p_Val2_26_0_4_fu_1401_p3[32'd7];

assign tmp_36_fu_1478_p3 = p_Val2_26_0_5_fu_1449_p3[32'd7];

assign tmp_37_fu_1550_p1 = p_Val2_24_fu_1745_p2[23:0];

assign tmp_39_fu_1595_p1 = p_Val2_31_0_1_fu_1752_p2[23:0];

assign tmp_46_0_1_cast_cast_fu_1361_p1 = tmp_46_0_1_fu_1353_p3;

assign tmp_46_0_1_fu_1353_p3 = {{b1_0_0_V_fu_1340_p2}, {8'd0}};

assign tmp_46_0_4_fu_1407_p3 = {{b1_0_0_V_1_fu_1396_p2}, {8'd0}};

assign tmp_46_0_5_fu_1455_p3 = {{b1_0_0_V_2_reg_2123}, {8'd0}};

assign tmp_46_cast_cast_fu_1304_p1 = tmp_14_fu_1296_p3;

assign tmp_47_0_1_cast_fu_1365_p1 = p_Val2_26_0_1_fu_1346_p3;

assign tmp_47_0_cast_fu_1308_p1 = p_Val2_21_fu_1281_p3;

assign tmp_49_0_1_fu_1393_p1 = tmp_34_reg_2118;

assign tmp_49_0_4_fu_1439_p1 = tmp_35_fu_1431_p3;

assign tmp_49_0_5_fu_1486_p1 = tmp_36_fu_1478_p3;

assign tmp_4_fu_809_p1 = tmp_20_reg_1764;

assign tmp_54_0_1_fu_1605_p3 = {{p_Val2_27_reg_2192}, {8'd0}};

assign tmp_57_0_1_fu_1627_p1 = tmp_40_reg_2202;

assign tmp_6_fu_1540_p1 = i7_reg_747;

assign tmp_7_fu_869_p1 = i_reg_690;

assign tmp_8_fu_1160_p1 = i1_reg_701;

assign tmp_9_fu_913_p1 = tmp_22_reg_1928;

assign tmp_s_fu_817_p1 = tmp_21_reg_1774;

assign x_d_obs_V_addr_1_reg_2212 = 64'd1;

assign x_d_obs_V_addr_reg_2207 = 64'd0;

assign x_obs_0_o_V = x_d_obs_V_q0;

assign x_obs_1_o_V = x_d_obs_V_q1;

assign x_obs_2_o_V = x_d_obs_V_q1;

assign x_obs_3_o_V = x_d_obs_V_q0;

assign x_obs_4_o_V = x_d_obs_V_q1;

assign x_obs_5_o_V = x_d_obs_V_q0;

always @ (posedge ap_clk) begin
    mf3_reg_2087[7:0] <= 8'b00000000;
    mt_reg_2092[7:0] <= 8'b00000000;
    tmp_10_reg_2245[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //state_observer
